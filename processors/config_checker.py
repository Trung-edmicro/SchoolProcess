"""
Config Checker
Ki·ªÉm tra v√† validate c·∫•u h√¨nh h·ªá th·ªëng
Author: Assistant
Date: 2025-07-26
"""

import os
import pandas as pd
from typing import Dict, List, Tuple
import json


class ConfigChecker:
    """Class ki·ªÉm tra c·∫•u h√¨nh h·ªá th·ªëng"""
    
    def __init__(self, input_folder: str, temp_folder: str, config_folder: str = "config"):
        """
        Kh·ªüi t·∫°o ConfigChecker
        
        Args:
            input_folder (str): Th∆∞ m·ª•c ch·ª©a file input
            temp_folder (str): Th∆∞ m·ª•c ch·ª©a template
            config_folder (str): Th∆∞ m·ª•c config
        """
        self.input_folder = input_folder
        self.temp_folder = temp_folder
        self.config_folder = config_folder
        
        # ƒê∆∞·ªùng d·∫´n c√°c file
        self.student_file = os.path.join(input_folder, "Danh sach hoc sinh.xlsx")
        self.teacher_file = os.path.join(input_folder, "DS t√†i kho·∫£n gi√°o vi√™n.xlsx")
        self.template_file = os.path.join(temp_folder, "Template_Export.xlsx")
        self.service_account_file = os.path.join(config_folder, "service_account.json")
        self.config_file = os.path.join(config_folder, "config.py")
        self.google_api_file = os.path.join(config_folder, "google_api.py")
    
    def check_file_system(self) -> Dict[str, Dict]:
        """
        Ki·ªÉm tra h·ªá th·ªëng file v√† th∆∞ m·ª•c
        
        Returns:
            Dict: K·∫øt qu·∫£ ki·ªÉm tra file system
        """
        print("\nüìÅ KI·ªÇM TRA H·ªÜ TH·ªêNG FILE:")
        print("=" * 40)
        
        results = {
            "directories": {},
            "input_files": {},
            "config_files": {},
            "template_files": {}
        }
        
        # Ki·ªÉm tra th∆∞ m·ª•c
        directories = {
            "Input Folder": self.input_folder,
            "Template Folder": self.temp_folder,
            "Config Folder": self.config_folder
        }
        
        for name, path in directories.items():
            exists = os.path.exists(path)
            results["directories"][name] = {"path": path, "exists": exists}
            status = "‚úÖ" if exists else "‚ùå"
            print(f"   {name}: {status} {path}")
        
        # Ki·ªÉm tra file input
        input_files = {
            "File h·ªçc sinh": self.student_file,
            "File gi√°o vi√™n": self.teacher_file
        }
        
        for name, path in input_files.items():
            exists = os.path.exists(path)
            size = os.path.getsize(path) if exists else 0
            results["input_files"][name] = {"path": path, "exists": exists, "size": size}
            status = "‚úÖ" if exists else "‚ùå"
            size_str = f"({size:,} bytes)" if exists else ""
            print(f"   {name}: {status} {size_str}")
        
        # Ki·ªÉm tra file template
        template_files = {
            "Template Excel": self.template_file
        }
        
        for name, path in template_files.items():
            exists = os.path.exists(path)
            size = os.path.getsize(path) if exists else 0
            results["template_files"][name] = {"path": path, "exists": exists, "size": size}
            status = "‚úÖ" if exists else "‚ùå"
            size_str = f"({size:,} bytes)" if exists else ""
            print(f"   {name}: {status} {size_str}")
        
        # Ki·ªÉm tra file config
        config_files = {
            "Service Account JSON": self.service_account_file,
            "Config Python": self.config_file,
            "Google API Python": self.google_api_file
        }
        
        for name, path in config_files.items():
            exists = os.path.exists(path)
            size = os.path.getsize(path) if exists else 0
            results["config_files"][name] = {"path": path, "exists": exists, "size": size}
            status = "‚úÖ" if exists else "‚ùå"
            size_str = f"({size:,} bytes)" if exists else ""
            print(f"   {name}: {status} {size_str}")
        
        return results
    
    def check_google_api_config(self) -> Dict[str, any]:
        """
        Ki·ªÉm tra c·∫•u h√¨nh Google API
        
        Returns:
            Dict: K·∫øt qu·∫£ ki·ªÉm tra Google API
        """
        print("\nüåê KI·ªÇM TRA C·∫§U H√åNH GOOGLE API:")
        print("=" * 40)
        
        results = {
            "service_account_valid": False,
            "google_api_module": False,
            "config_module": False,
            "connection_test": False,
            "errors": []
        }
        
        try:
            # Ki·ªÉm tra service account JSON
            if os.path.exists(self.service_account_file):
                try:
                    with open(self.service_account_file, 'r') as f:
                        service_data = json.load(f)
                    
                    required_keys = ['type', 'project_id', 'private_key', 'client_email']
                    missing_keys = [key for key in required_keys if key not in service_data]
                    
                    if not missing_keys:
                        results["service_account_valid"] = True
                        print("   Service Account JSON: ‚úÖ H·ª£p l·ªá")
                    else:
                        results["errors"].append(f"Service Account thi·∫øu keys: {missing_keys}")
                        print("   Service Account JSON: ‚ùå Thi·∫øu th√¥ng tin")
                        
                except json.JSONDecodeError:
                    results["errors"].append("Service Account JSON kh√¥ng h·ª£p l·ªá")
                    print("   Service Account JSON: ‚ùå Format kh√¥ng h·ª£p l·ªá")
            else:
                results["errors"].append("Service Account JSON kh√¥ng t·ªìn t·∫°i")
                print("   Service Account JSON: ‚ùå Kh√¥ng t·ªìn t·∫°i")
            
            # Ki·ªÉm tra module Google API
            try:
                from config.google_api import GoogleAPIClient
                results["google_api_module"] = True
                print("   Google API Module: ‚úÖ Import th√†nh c√¥ng")
                
                # Test connection
                try:
                    client = GoogleAPIClient()
                    if client.test_connection():
                        results["connection_test"] = True
                        print("   Google API Connection: ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng")
                    else:
                        results["errors"].append("Google API connection test th·∫•t b·∫°i")
                        print("   Google API Connection: ‚ùå K·∫øt n·ªëi th·∫•t b·∫°i")
                        
                except Exception as e:
                    results["errors"].append(f"Google API connection error: {str(e)}")
                    print(f"   Google API Connection: ‚ùå L·ªói: {str(e)}")
                    
            except ImportError as e:
                results["errors"].append(f"Google API module import error: {str(e)}")
                print(f"   Google API Module: ‚ùå Import th·∫•t b·∫°i: {str(e)}")
            
            # Ki·ªÉm tra config module
            try:
                from config.config import Config
                results["config_module"] = True
                print("   Config Module: ‚úÖ Import th√†nh c√¥ng")
            except ImportError as e:
                results["errors"].append(f"Config module import error: {str(e)}")
                print(f"   Config Module: ‚ùå Import th·∫•t b·∫°i: {str(e)}")
                
        except Exception as e:
            results["errors"].append(f"General error: {str(e)}")
            print(f"   ‚ùå L·ªói chung: {str(e)}")
        
        return results
    
    def check_data_integrity(self) -> Dict[str, any]:
        """
        Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa d·ªØ li·ªáu
        
        Returns:
            Dict: K·∫øt qu·∫£ ki·ªÉm tra d·ªØ li·ªáu
        """
        print("\nüìä KI·ªÇM TRA T√çNH TO√ÄN V·∫∏N D·ªÆ LI·ªÜU:")
        print("=" * 40)
        
        results = {
            "students": {"count": 0, "valid": False, "errors": []},
            "teachers": {"count": 0, "valid": False, "errors": []},
            "template": {"valid": False, "sheets": [], "errors": []}
        }
        
        # Ki·ªÉm tra d·ªØ li·ªáu h·ªçc sinh
        try:
            if os.path.exists(self.student_file):
                df_students = pd.read_excel(
                    self.student_file, 
                    sheet_name="Danh s√°ch HS to√†n tr∆∞·ªùng",
                    header=5,
                    engine='openpyxl'
                )
                df_students = df_students.dropna(how='all')
                
                # Ki·ªÉm tra c·ªôt STT c√≥ ph·∫£i s·ªë kh√¥ng
                valid_students = df_students[pd.to_numeric(df_students.iloc[:, 0], errors='coerce').notna()]
                
                results["students"]["count"] = len(valid_students)
                results["students"]["valid"] = len(valid_students) > 0
                
                if len(valid_students) == 0:
                    results["students"]["errors"].append("Kh√¥ng c√≥ h·ªçc sinh h·ª£p l·ªá")
                
                print(f"   D·ªØ li·ªáu h·ªçc sinh: ‚úÖ {len(valid_students)} h·ªçc sinh h·ª£p l·ªá")
                
            else:
                results["students"]["errors"].append("File h·ªçc sinh kh√¥ng t·ªìn t·∫°i")
                print("   D·ªØ li·ªáu h·ªçc sinh: ‚ùå File kh√¥ng t·ªìn t·∫°i")
                
        except Exception as e:
            results["students"]["errors"].append(f"L·ªói ƒë·ªçc file h·ªçc sinh: {str(e)}")
            print(f"   D·ªØ li·ªáu h·ªçc sinh: ‚ùå L·ªói: {str(e)}")
        
        # Ki·ªÉm tra d·ªØ li·ªáu gi√°o vi√™n
        try:
            if os.path.exists(self.teacher_file):
                df_teachers = pd.read_excel(
                    self.teacher_file,
                    sheet_name=0,
                    engine='openpyxl'
                )
                df_teachers = df_teachers.dropna(how='all')
                
                # Ki·ªÉm tra c·ªôt STT c√≥ ph·∫£i s·ªë kh√¥ng
                valid_teachers = df_teachers[pd.to_numeric(df_teachers.iloc[:, 0], errors='coerce').notna()]
                
                results["teachers"]["count"] = len(valid_teachers)
                results["teachers"]["valid"] = len(valid_teachers) > 0
                
                if len(valid_teachers) == 0:
                    results["teachers"]["errors"].append("Kh√¥ng c√≥ gi√°o vi√™n h·ª£p l·ªá")
                
                print(f"   D·ªØ li·ªáu gi√°o vi√™n: ‚úÖ {len(valid_teachers)} gi√°o vi√™n h·ª£p l·ªá")
                
            else:
                results["teachers"]["errors"].append("File gi√°o vi√™n kh√¥ng t·ªìn t·∫°i")
                print("   D·ªØ li·ªáu gi√°o vi√™n: ‚ùå File kh√¥ng t·ªìn t·∫°i")
                
        except Exception as e:
            results["teachers"]["errors"].append(f"L·ªói ƒë·ªçc file gi√°o vi√™n: {str(e)}")
            print(f"   D·ªØ li·ªáu gi√°o vi√™n: ‚ùå L·ªói: {str(e)}")
        
        # Ki·ªÉm tra template
        try:
            if os.path.exists(self.template_file):
                from openpyxl import load_workbook
                wb = load_workbook(self.template_file)
                
                required_sheets = ['ADMIN', 'GIAO-VIEN', 'HOC-SINH']
                existing_sheets = wb.sheetnames
                
                results["template"]["sheets"] = existing_sheets
                
                missing_sheets = [sheet for sheet in required_sheets if sheet not in existing_sheets]
                
                if not missing_sheets:
                    results["template"]["valid"] = True
                    print(f"   Template Excel: ‚úÖ C√≥ ƒë·ªß {len(required_sheets)} sheet b·∫Øt bu·ªôc")
                else:
                    results["template"]["errors"].append(f"Thi·∫øu sheets: {missing_sheets}")
                    print(f"   Template Excel: ‚ùå Thi·∫øu sheets: {missing_sheets}")
                
            else:
                results["template"]["errors"].append("File template kh√¥ng t·ªìn t·∫°i")
                print("   Template Excel: ‚ùå File kh√¥ng t·ªìn t·∫°i")
                
        except Exception as e:
            results["template"]["errors"].append(f"L·ªói ƒë·ªçc template: {str(e)}")
            print(f"   Template Excel: ‚ùå L·ªói: {str(e)}")
        
        return results
    
    def check_python_dependencies(self) -> Dict[str, bool]:
        """
        Ki·ªÉm tra c√°c Python dependencies
        
        Returns:
            Dict: K·∫øt qu·∫£ ki·ªÉm tra dependencies
        """
        print("\nüêç KI·ªÇM TRA PYTHON DEPENDENCIES:")
        print("=" * 40)
        
        required_packages = {
            'pandas': 'pandas',
            'openpyxl': 'openpyxl', 
            'google-auth': 'google.auth',
            'google-auth-oauthlib': 'google_auth_oauthlib',
            'google-auth-httplib2': 'google_auth_httplib2',
            'google-api-python-client': 'googleapiclient',
            'gspread': 'gspread'
        }
        
        results = {}
        
        for package_name, import_name in required_packages.items():
            try:
                __import__(import_name)
                results[package_name] = True
                print(f"   {package_name}: ‚úÖ ƒê√£ c√†i ƒë·∫∑t")
            except ImportError:
                results[package_name] = False
                print(f"   {package_name}: ‚ùå Ch∆∞a c√†i ƒë·∫∑t")
        
        return results
    
    def run_full_check(self) -> Dict[str, any]:
        """
        Ch·∫°y ki·ªÉm tra to√†n di·ªán h·ªá th·ªëng
        
        Returns:
            Dict: K·∫øt qu·∫£ ki·ªÉm tra t·ªïng h·ª£p
        """
        print("\nüîç KI·ªÇM TRA TO√ÄN DI·ªÜN H·ªÜ TH·ªêNG")
        print("=" * 60)
        
        results = {
            "file_system": self.check_file_system(),
            "google_api": self.check_google_api_config(),
            "data_integrity": self.check_data_integrity(),
            "python_dependencies": self.check_python_dependencies(),
            "overall_status": "unknown"
        }
        
        # ƒê√°nh gi√° tr·∫°ng th√°i t·ªïng th·ªÉ
        critical_issues = []
        
        # Ki·ªÉm tra file system
        if not all(results["file_system"]["directories"][d]["exists"] for d in results["file_system"]["directories"]):
            critical_issues.append("Thi·∫øu th∆∞ m·ª•c quan tr·ªçng")
        
        if not all(results["file_system"]["input_files"][f]["exists"] for f in results["file_system"]["input_files"]):
            critical_issues.append("Thi·∫øu file input")
        
        if not results["file_system"]["template_files"]["Template Excel"]["exists"]:
            critical_issues.append("Thi·∫øu file template")
        
        # Ki·ªÉm tra d·ªØ li·ªáu
        if not results["data_integrity"]["students"]["valid"]:
            critical_issues.append("D·ªØ li·ªáu h·ªçc sinh kh√¥ng h·ª£p l·ªá")
        
        if not results["data_integrity"]["teachers"]["valid"]:
            critical_issues.append("D·ªØ li·ªáu gi√°o vi√™n kh√¥ng h·ª£p l·ªá")
        
        if not results["data_integrity"]["template"]["valid"]:
            critical_issues.append("Template kh√¥ng h·ª£p l·ªá")
        
        # Ki·ªÉm tra dependencies
        core_packages = ['pandas', 'openpyxl']
        if not all(results["python_dependencies"][pkg] for pkg in core_packages):
            critical_issues.append("Thi·∫øu Python packages quan tr·ªçng")
        
        # ƒê√°nh gi√° t·ªïng th·ªÉ
        if not critical_issues:
            if results["google_api"]["connection_test"]:
                results["overall_status"] = "excellent"
            elif results["google_api"]["service_account_valid"]:
                results["overall_status"] = "good"
            else:
                results["overall_status"] = "fair"
        else:
            results["overall_status"] = "poor"
        
        results["critical_issues"] = critical_issues
        
        # In k·∫øt qu·∫£ t·ªïng k·∫øt
        print(f"\nüìã K·∫æT QU·∫¢ T·ªîNG K·∫æT:")
        print("=" * 40)
        
        status_icons = {
            "excellent": "üü¢",
            "good": "üü°", 
            "fair": "üü†",
            "poor": "üî¥"
        }
        
        status_texts = {
            "excellent": "XU·∫§T S·∫ÆC - T·∫•t c·∫£ ch·ª©c nƒÉng ho·∫°t ƒë·ªông t·ªët",
            "good": "T·ªêT - Ch·ª©c nƒÉng c∆° b·∫£n ho·∫°t ƒë·ªông, Google API c·∫ßn ki·ªÉm tra",
            "fair": "TRUNG B√åNH - Ch·ª©c nƒÉng c∆° b·∫£n ho·∫°t ƒë·ªông, thi·∫øu Google API",
            "poor": "Y·∫æU - C√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng c·∫ßn kh·∫Øc ph·ª•c"
        }
        
        status = results["overall_status"]
        print(f"   Tr·∫°ng th√°i t·ªïng th·ªÉ: {status_icons[status]} {status_texts[status]}")
        
        if critical_issues:
            print(f"\n   ‚ö†Ô∏è  V·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c:")
            for issue in critical_issues:
                print(f"      - {issue}")
        
        return results
