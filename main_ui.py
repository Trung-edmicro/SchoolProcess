"""
School Process UI Launcher - Fixed Version
Giao di·ªán ng∆∞·ªùi d√πng hi·ªán ƒë·∫°i cho ·ª©ng d·ª•ng School Process
"""

import tkinter as tk
from tkinter import ttk, messagebox
import sys
import os
from pathlib import Path
import time

# Th√™m project root v√†o Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


class SplashScreen:
    """Splash screen khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("School Process")
        self.root.geometry("400x300")
        self.root.resizable(False, False)
        
        # Remove title bar
        self.root.overrideredirect(True)
        
        # Center window
        self.center_window()
        
        # Configure background
        self.root.configure(bg='#1976D2')
        
        self.setup_ui()
        
    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p UI splash screen"""
        # Main frame
        main_frame = tk.Frame(self.root, bg='#1976D2')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Logo/Icon
        logo_label = tk.Label(main_frame, 
                            text="üè´",
                            font=('Segoe UI', 48),
                            bg='#1976D2',
                            fg='white')
        logo_label.pack(pady=(40, 20))
        
        # Title
        title_label = tk.Label(main_frame,
                             text="School Process",
                             font=('Segoe UI', 20, 'bold'),
                             bg='#1976D2',
                             fg='white')
        title_label.pack(pady=(0, 10))
        
        # Subtitle
        subtitle_label = tk.Label(main_frame,
                                text="·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªùng h·ªçc",
                                font=('Segoe UI', 12),
                                bg='#1976D2',
                                fg='#E3F2FD')
        subtitle_label.pack(pady=(0, 30))
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(main_frame,
                                     variable=self.progress_var,
                                     maximum=100,
                                     length=300)
        progress_bar.pack(pady=(0, 10))
        
        # Status label
        self.status_var = tk.StringVar(value="ƒêang kh·ªüi ƒë·ªông...")
        status_label = tk.Label(main_frame,
                              textvariable=self.status_var,
                              font=('Segoe UI', 10),
                              bg='#1976D2',
                              fg='#E3F2FD')
        status_label.pack()
        
        # Version label
        version_label = tk.Label(main_frame,
                               text="Version 1.0.1 - UI Fixed",
                               font=('Segoe UI', 8),
                               bg='#1976D2',
                               fg='#BBDEFB')
        version_label.pack(side='bottom', pady=(20, 0))
        
    def update_progress(self, value, status=""):
        """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh"""
        self.progress_var.set(value)
        if status:
            self.status_var.set(status)
        self.root.update()
        
    def close(self):
        """ƒê√≥ng splash screen"""
        self.root.destroy()


def check_dependencies():
    """Ki·ªÉm tra dependencies"""
    required_modules = {
        'pandas': 'pandas',
        'requests': 'requests', 
        'google-auth': 'google.auth',
        'google-auth-oauthlib': 'google_auth_oauthlib',
        'google-auth-httplib2': 'google_auth_httplib2',
        'google-api-python-client': 'googleapiclient',
        'openpyxl': 'openpyxl'
    }
    
    missing_modules = []
    
    for package_name, import_name in required_modules.items():
        try:
            __import__(import_name)
            print(f"‚úÖ {package_name} - OK")
        except ImportError as e:
            print(f"‚ùå {package_name} - Missing: {e}")
            missing_modules.append(package_name)
            
    return missing_modules


def show_dependency_error(missing_modules):
    """Hi·ªÉn th·ªã l·ªói dependencies"""
    root = tk.Tk()
    root.withdraw()  # Hide main window
    
    error_msg = f"""
Thi·∫øu c√°c module c·∫ßn thi·∫øt:

{chr(10).join(f"‚Ä¢ {module}" for module in missing_modules)}

Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh:
pip install {" ".join(missing_modules)}

Ho·∫∑c:
pip install -r requirements.txt
    """
    
    messagebox.showerror("Thi·∫øu Dependencies", error_msg)
    root.destroy()


def load_app_with_splash():
    """Load app v·ªõi splash screen"""
    print("üè´ School Process - Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...")
    
    # Create splash screen
    splash = SplashScreen()
    print("‚úÖ ƒê√£ t·∫°o splash screen")
    
    try:
        # Step 1: Check dependencies
        splash.update_progress(20, "ƒêang ki·ªÉm tra dependencies...")
        print("üì¶ Ki·ªÉm tra dependencies...")
        
        missing = check_dependencies()
        if missing:
            print(f"‚ùå Thi·∫øu dependencies: {missing}")
            splash.close()
            show_dependency_error(missing)
            return None
            
        # Step 2: Load config
        splash.update_progress(40, "ƒêang load c·∫•u h√¨nh...")
        print("‚öôÔ∏è Load c·∫•u h√¨nh...")
        
        from config.config_manager import get_config
        config = get_config()
        print("‚úÖ ƒê√£ load config")
        
        # Step 3: Import UI
        splash.update_progress(60, "ƒêang kh·ªüi t·∫°o UI...")
        print("üñ•Ô∏è Kh·ªüi t·∫°o UI...")
        
        from ui.main_window import SchoolProcessMainWindow
        print("‚úÖ ƒê√£ import UI module")
        
        # Step 4: Create app
        splash.update_progress(80, "ƒêang t·∫°o giao di·ªán...")
        print("üé® T·∫°o main window...")
        
        app = SchoolProcessMainWindow()
        print("‚úÖ ƒê√£ t·∫°o main window")
        
        # Step 5: Complete
        splash.update_progress(100, "Ho√†n t·∫•t!")
        print("üéâ S·∫µn s√†ng hi·ªÉn th·ªã UI...")
        
        # Wait a moment
        time.sleep(0.5)
        
        # Close splash
        splash.close()
        print("‚úÖ Splash screen ƒë√£ ƒë√≥ng")
        
        return app
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông: {e}")
        import traceback
        traceback.print_exc()
        
        splash.close()
        
        # Show error
        root = tk.Tk()
        root.withdraw()
        error_msg = f"""
L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}

Vui l√≤ng ki·ªÉm tra:
1. C·∫•u h√¨nh trong file .env
2. Quy·ªÅn truy c·∫≠p file/th∆∞ m·ª•c
3. K·∫øt n·ªëi m·∫°ng

Chi ti·∫øt l·ªói:
{str(e)}
        """
        messagebox.showerror("L·ªói Kh·ªüi ƒë·ªông", error_msg)
        root.destroy()
        return None


def main():
    """Entry point ch√≠nh"""
    try:
        # Load app with splash screen
        app = load_app_with_splash()
        
        if app is None:
            print("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng")
            return
            
        # Run main app
        print("üöÄ Kh·ªüi ƒë·ªông main app...")
        app.run()
        print("‚úÖ App ƒë√£ k·∫øt th√∫c")
        
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback error dialog
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("L·ªói nghi√™m tr·ªçng", 
                               f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng:\n{str(e)}")
            root.destroy()
        except:
            # Final fallback
            print("Kh√¥ng th·ªÉ hi·ªÉn th·ªã dialog l·ªói. Tho√°t ·ª©ng d·ª•ng.")
            input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()
