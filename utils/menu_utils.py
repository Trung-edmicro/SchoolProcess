"""
Menu Utilities
C√°c h√†m ti·ªán √≠ch cho menu v√† UI
Author: Assistant
Date: 2025-07-26
"""

from typing import List, Optional, Callable
from datetime import datetime


def print_header(title: str, subtitle: Optional[str] = None):
    """
    In header ch∆∞∆°ng tr√¨nh
    
    Args:
        title (str): Ti√™u ƒë·ªÅ ch√≠nh
        subtitle (Optional[str]): Ti√™u ƒë·ªÅ ph·ª•
    """
    print("=" * 80)
    print(f"üè´ {title}")
    print("=" * 80)
    print(f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if subtitle:
        print(f"üìã {subtitle}")
    
    print("=" * 80)


def print_menu(title: str, options: List[str], exit_option: str = "Tho√°t"):
    """
    In menu l·ª±a ch·ªçn
    
    Args:
        title (str): Ti√™u ƒë·ªÅ menu
        options (List[str]): Danh s√°ch c√°c l·ª±a ch·ªçn
        exit_option (str): Text cho option tho√°t
    """
    print(f"\nüìã {title}:")
    
    for i, option in enumerate(options, 1):
        print(f"   {i}Ô∏è‚É£  {option}")
    
    print(f"   0Ô∏è‚É£  {exit_option}")
    print("-" * 60)


def get_user_choice(max_choice: int, prompt: str = "üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n") -> int:
    """
    L·∫•y l·ª±a ch·ªçn t·ª´ user v·ªõi validation
    
    Args:
        max_choice (int): S·ªë l·ª±a ch·ªçn t·ªëi ƒëa
        prompt (str): Text prompt
        
    Returns:
        int: L·ª±a ch·ªçn c·ªßa user (0 ƒë·ªÉ tho√°t)
    """
    while True:
        try:
            choice = input(f"{prompt} (0-{max_choice}): ").strip()
            
            if not choice:
                print("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn")
                continue
            
            choice_num = int(choice)
            
            if 0 <= choice_num <= max_choice:
                return choice_num
            else:
                print(f"‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 0-{max_choice}")
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Tho√°t b·ªüi ng∆∞·ªùi d√πng")
            return 0


def get_user_input(prompt: str, required: bool = False, default: Optional[str] = None) -> Optional[str]:
    """
    L·∫•y input text t·ª´ user
    
    Args:
        prompt (str): Text prompt
        required (bool): C√≥ b·∫Øt bu·ªôc nh·∫≠p kh√¥ng
        default (Optional[str]): Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        
    Returns:
        Optional[str]: Input t·ª´ user ho·∫∑c None
    """
    try:
        if default:
            full_prompt = f"{prompt} (m·∫∑c ƒë·ªãnh: {default}): "
        else:
            full_prompt = f"{prompt}: "
        
        user_input = input(full_prompt).strip()
        
        # S·ª≠ d·ª•ng default n·∫øu kh√¥ng c√≥ input
        if not user_input and default:
            return default
        
        # Ki·ªÉm tra required
        if required and not user_input:
            print("‚ö†Ô∏è  Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc")
            return get_user_input(prompt, required, default)
        
        return user_input if user_input else None
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  H·ªßy b·ªüi ng∆∞·ªùi d√πng")
        return None


def confirm_action(message: str, default_yes: bool = False) -> bool:
    """
    X√°c nh·∫≠n h√†nh ƒë·ªông t·ª´ user
    
    Args:
        message (str): Message x√°c nh·∫≠n
        default_yes (bool): M·∫∑c ƒë·ªãnh c√≥ ph·∫£i Yes kh√¥ng
        
    Returns:
        bool: True n·∫øu user x√°c nh·∫≠n
    """
    try:
        default_text = "Y/n" if default_yes else "y/N"
        response = input(f"ü§î {message} ({default_text}): ").lower().strip()
        
        if not response:
            return default_yes
        
        return response in ['y', 'yes', 'c√≥', 'c']
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  H·ªßy b·ªüi ng∆∞·ªùi d√πng")
        return False


def run_menu_loop(title: str, options: List[str], handlers: List[Callable], 
                  exit_option: str = "Tho√°t", auto_continue: bool = True) -> None:
    """
    Ch·∫°y menu loop v·ªõi c√°c handler
    
    Args:
        title (str): Ti√™u ƒë·ªÅ menu
        options (List[str]): Danh s√°ch options
        handlers (List[Callable]): Danh s√°ch handler functions
        exit_option (str): Text cho option tho√°t
        auto_continue (bool): T·ª± ƒë·ªông h·ªèi ti·∫øp t·ª•c sau m·ªói action
    """
    if len(options) != len(handlers):
        raise ValueError("S·ªë l∆∞·ª£ng options v√† handlers ph·∫£i b·∫±ng nhau")
    
    while True:
        try:
            print_menu(title, options, exit_option)
            choice = get_user_choice(len(options))
            
            if choice == 0:
                print(f"\nüëã {exit_option}...")
                break
            
            # G·ªçi handler t∆∞∆°ng ·ª©ng
            handler = handlers[choice - 1]
            if callable(handler):
                try:
                    handler()
                except Exception as e:
                    print(f"‚ùå L·ªói th·ª±c hi·ªán: {e}")
            
            # H·ªèi c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
            if auto_continue and choice != 0:
                if not confirm_action("Ti·∫øp t·ª•c s·ª≠ d·ª•ng menu?", default_yes=True):
                    print("\nüëã Tho√°t menu...")
                    break
                    
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  Menu b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            break
        except Exception as e:
            print(f"\nüí• L·ªói menu: {e}")
            if not confirm_action("Ti·∫øp t·ª•c s·ª≠ d·ª•ng menu?"):
                break


def print_separator(title: str = "", length: int = 60, char: str = "-"):
    """
    In d√≤ng ph√¢n c√°ch
    
    Args:
        title (str): Ti√™u ƒë·ªÅ (optional)
        length (int): ƒê·ªô d√†i d√≤ng
        char (str): K√Ω t·ª± ph√¢n c√°ch
    """
    if title:
        padding = (length - len(title) - 2) // 2
        line = char * padding + f" {title} " + char * padding
        # ƒê·∫£m b·∫£o ƒë·ªô d√†i ch√≠nh x√°c
        if len(line) < length:
            line += char * (length - len(line))
        print(line)
    else:
        print(char * length)


def print_status(message: str, status: str = "info"):
    """
    In message v·ªõi status
    
    Args:
        message (str): N·ªôi dung message
        status (str): Lo·∫°i status (success, error, warning, info)
    """
    icons = {
        'success': '‚úÖ',
        'error': '‚ùå', 
        'warning': '‚ö†Ô∏è',
        'info': '‚ÑπÔ∏è'
    }
    
    icon = icons.get(status, '‚ÑπÔ∏è')
    print(f"{icon} {message}")


def print_progress(current: int, total: int, message: str = ""):
    """
    In progress bar ƒë∆°n gi·∫£n
    
    Args:
        current (int): Ti·∫øn ƒë·ªô hi·ªán t·∫°i
        total (int): T·ªïng s·ªë
        message (str): Message k√®m theo
    """
    percentage = (current / total) * 100 if total > 0 else 0
    bar_length = 20
    filled_length = int(bar_length * current // total) if total > 0 else 0
    
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
    
    progress_text = f"üîÑ [{bar}] {percentage:.1f}% ({current}/{total})"
    if message:
        progress_text += f" - {message}"
    
    print(f"\r{progress_text}", end='', flush=True)
    
    if current >= total:
        print()  # New line khi ho√†n th√†nh


# Alias functions ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
get_user_confirmation = confirm_action
