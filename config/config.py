"""
C·∫•u h√¨nh Google Drive v√† Google Sheets API
Author: Assistant
Date: 2025-07-26
"""

import os
from typing import Dict, List, Optional

# =============================================================================
# GOOGLE API CONFIGURATION
# =============================================================================

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn service account JSON file
SERVICE_ACCOUNT_FILE = os.path.join(os.path.dirname(__file__), 'service_account.json')

# Scopes c·∫ßn thi·∫øt cho Google APIs
SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.file'
]

# =============================================================================
# GOOGLE DRIVE CONFIGURATION
# =============================================================================

# ID c·ªßa Google Drive folder ch·ª©a file input
# C√≥ th·ªÉ l·∫•y t·ª´ URL: https://drive.google.com/drive/folders/FOLDER_ID_HERE
DRIVE_INPUT_FOLDER_ID = ""  # TODO: C·∫≠p nh·∫≠t ID folder input

# ID c·ªßa Google Drive folder ƒë·ªÉ l∆∞u file output
DRIVE_OUTPUT_FOLDER_ID = ""  # TODO: C·∫≠p nh·∫≠t ID folder output

# T√™n c√°c file input tr√™n Google Drive
DRIVE_FILES = {
    'students': 'Danh sach hoc sinh.xlsx',
    'teachers': 'DS t√†i kho·∫£n gi√°o vi√™n.xlsx',
    'template': 'Template_Export.xlsx'
}

# =============================================================================
# GOOGLE SHEETS CONFIGURATION
# =============================================================================

# ID c·ªßa Google Sheets ch·ª©a d·ªØ li·ªáu h·ªçc sinh
# C√≥ th·ªÉ l·∫•y t·ª´ URL: https://docs.google.com/spreadsheets/d/SHEET_ID_HERE/edit
STUDENTS_SHEET_ID = ""  # TODO: C·∫≠p nh·∫≠t Sheet ID h·ªçc sinh

# ID c·ªßa Google Sheets ch·ª©a d·ªØ li·ªáu gi√°o vi√™n
TEACHERS_SHEET_ID = ""  # TODO: C·∫≠p nh·∫≠t Sheet ID gi√°o vi√™n

# T√™n c√°c sheet trong Google Sheets
SHEET_NAMES = {
    'students': 'Danh s√°ch HS to√†n tr∆∞·ªùng',
    'teachers': 'GIAO-VIEN'
}

# =============================================================================
# LOCAL CONFIGURATION
# =============================================================================

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c local ƒë·ªÉ sync d·ªØ li·ªáu
LOCAL_SYNC_FOLDER = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'sync')

# Th·ªùi gian timeout cho API calls (seconds)
API_TIMEOUT = 30

# =============================================================================
# MAPPING CONFIGURATION
# =============================================================================

# Mapping c·ªôt t·ª´ Google Sheets sang template
STUDENTS_COLUMN_MAPPING = {
    'STT': 'STT',
    'M√£ h·ªçc sinh': 'M√£ h·ªçc sinh',
    'H·ªç v√† t√™n': 'H·ªç v√† t√™n',
    'Ng√†y sinh': 'Ng√†y sinh',
    'Kh·ªëi': 'Kh·ªëi',
    'L·ªõp': 'L·ªõp ch√≠nh',
    'T√†i kho·∫£n': 'T√†i kho·∫£n',
    'M·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu': 'M·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu',
    'M√£ ƒëƒÉng nh·∫≠p cho PH': 'M√£ ƒëƒÉng nh·∫≠p cho PH',
    'Th·ªùi gian t·∫°o': 'Th·ªùi gian t·∫°o'
}

TEACHERS_COLUMN_MAPPING = {
    'STT': 'STT',
    'T√™n gi√°o vi√™n': 'T√™n gi√°o vi√™n',
    'Ng√†y sinh': 'Ng√†y sinh',
    'T√™n ƒëƒÉng nh·∫≠p': 'T√™n ƒëƒÉng nh·∫≠p',
    'M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu': 'M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu',
    'CCCD/CMND': 'CCCD/CMND',
    'Th·ªùi gian t·∫°o': 'Th·ªùi gian t·∫°o'
}

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

def validate_config() -> Dict[str, bool]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa configuration
    
    Returns:
        Dict[str, bool]: K·∫øt qu·∫£ validation cho t·ª´ng th√†nh ph·∫ßn
    """
    results = {
        'service_account_file': os.path.exists(SERVICE_ACCOUNT_FILE),
        'drive_input_folder': bool(DRIVE_INPUT_FOLDER_ID),
        'drive_output_folder': bool(DRIVE_OUTPUT_FOLDER_ID),
        'students_sheet': bool(STUDENTS_SHEET_ID),
        'teachers_sheet': bool(TEACHERS_SHEET_ID),
        'local_sync_folder': True  # S·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
    }
    
    return results

def print_config_status():
    """In tr·∫°ng th√°i c·∫•u h√¨nh hi·ªán t·∫°i"""
    print("\nüìã TR·∫†NG TH√ÅI C·∫§U H√åNH GOOGLE API:")
    print("=" * 50)
    
    validation = validate_config()
    
    for key, status in validation.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        key_display = key.replace('_', ' ').title()
        print(f"{status_icon} {key_display}: {'OK' if status else 'Ch∆∞a c·∫•u h√¨nh'}")
    
    if not validation['service_account_file']:
        print(f"\n‚ö†Ô∏è  File service account kh√¥ng t·ªìn t·∫°i: {SERVICE_ACCOUNT_FILE}")
        print("   H√£y t·∫£i file JSON t·ª´ Google Cloud Console v√† ƒë·∫∑t v√†o th∆∞ m·ª•c config/")
    
    if not validation['drive_input_folder']:
        print("\n‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh DRIVE_INPUT_FOLDER_ID")
        print("   H√£y c·∫≠p nh·∫≠t ID folder input trong config.py")
    
    if not validation['drive_output_folder']:
        print("\n‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh DRIVE_OUTPUT_FOLDER_ID")
        print("   H√£y c·∫≠p nh·∫≠t ID folder output trong config.py")
    
    if not validation['students_sheet']:
        print("\n‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh STUDENTS_SHEET_ID")
        print("   H√£y c·∫≠p nh·∫≠t ID Google Sheets h·ªçc sinh trong config.py")
    
    if not validation['teachers_sheet']:
        print("\n‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh TEACHERS_SHEET_ID")
        print("   H√£y c·∫≠p nh·∫≠t ID Google Sheets gi√°o vi√™n trong config.py")
    
    print("\nüìù H∆∞·ªõng d·∫´n chi ti·∫øt xem file README.md trong th∆∞ m·ª•c config/")

def get_sample_config():
    """Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫´u"""
    return {
        'DRIVE_INPUT_FOLDER_ID': '1ABC123def456GHI789jkl',
        'DRIVE_OUTPUT_FOLDER_ID': '1XYZ789abc123DEF456ghi',
        'STUDENTS_SHEET_ID': '1MNO456pqr789STU123vwx',
        'TEACHERS_SHEET_ID': '1QRS789tuv123WXY456zab'
    }

if __name__ == "__main__":
    print_config_status()
    
    print("\nüìã C·∫§U H√åNH M·∫™U:")
    print("=" * 50)
    sample = get_sample_config()
    for key, value in sample.items():
        print(f"{key} = '{value}'")
