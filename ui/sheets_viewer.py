"""
Google Sheets Viewer Component v·ªõi Tksheet
Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ Google Sheets v·ªõi giao di·ªán gi·ªëng Google Sheets s·ª≠ d·ª•ng Tksheet
"""

import tkinter as tk
from tkinter import ttk, messagebox
import sys
from pathlib import Path

# Th√™m project root v√†o Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    import tksheet
    TKSHEET_AVAILABLE = True
except ImportError:
    # Graceful fallback when tksheet is not installed
    tksheet = None  # type: ignore
    TKSHEET_AVAILABLE = False
    print("‚ö†Ô∏è Module tksheet ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·∫°y: pip install tksheet")

from config.config_manager import get_config
from extractors.sheets_extractor import GoogleSheetsExtractor


class GoogleSheetsViewer:
    """Component hi·ªÉn th·ªã Google Sheets data v·ªõi Tksheet"""
    
    def __init__(self, parent_frame):
        self.parent_frame = parent_frame
        self.config = get_config()
        self.extractor = None
        self.data = []
        self.sheet_widget = None
        self.filtered_data = []
        
        # ƒê·ªãnh nghƒ©a m√†u s·∫Øc cho t·ª´ng ng∆∞·ªùi x·ª≠ l√Ω
        self.person_colors = {
            'Ph∆∞·ª£ng': '#FF6B6B',    # ƒê·ªè coral
            'Kh·∫£i': '#4ECDC4',      # Xanh mint
            'L·ªôc': '#45B7D1',      # Xanh d∆∞∆°ng
            'H√πng': '#96CEB4',     # Xanh l√° nh·∫°t
            'Lan': '#FFEAA7',      # V√†ng nh·∫°t
            'ƒê√¥ng': '#DDA0DD',     # T√≠m nh·∫°t
            'Trung': '#98D8C8',    # Xanh ng·ªçc
            'Nam': '#F7DC6F',      # V√†ng kem
            'Tr√°ng': '#BB8FCE',    # T√≠m lavender
            'Th·∫Øm': '#F1948A',     # H·ªìng nh·∫°t
            'Th·ªãnh': '#85C1E9'     # Xanh sky
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán v·ªõi Tksheet"""
        # Configure parent frame
        self.parent_frame.configure(relief='flat', borderwidth=0)
        
        # Main container - lu√¥n t·∫°o tr∆∞·ªõc
        self.main_frame = ttk.Frame(self.parent_frame)
        self.main_frame.pack(fill='both', expand=True, padx=0, pady=0)
        
        if not TKSHEET_AVAILABLE:
            self.show_tksheet_error()
            return
        
        # Header frame v·ªõi Google colors
        self.create_header()
        
        # Separator line
        separator = ttk.Separator(self.main_frame, orient='horizontal')
        separator.pack(fill='x', pady=(0, 1))
        
        # Tksheet container
        self.create_tksheet_table()
        
        # Status frame
        self.create_status_bar()
        
        # Load data initially
        self.load_sheets_data()
        
        # Bind main frame resize ƒë·ªÉ c·∫≠p nh·∫≠t column widths
        self.main_frame.bind('<Configure>', self.on_main_frame_resize)
        
    def show_tksheet_error(self):
        """Hi·ªÉn th·ªã l·ªói khi tksheet ch∆∞a c√†i ƒë·∫∑t"""
        error_frame = ttk.Frame(self.main_frame)
        error_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        error_label = ttk.Label(error_frame,
                               text="‚ö†Ô∏è Module 'tksheet' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t",
                               font=('Segoe UI', 16, 'bold'),
                               foreground='red')
        error_label.pack(pady=20)
        
        instruction_label = ttk.Label(error_frame,
                                     text="Vui l√≤ng ch·∫°y l·ªánh sau ƒë·ªÉ c√†i ƒë·∫∑t:\npip install tksheet",
                                     font=('Segoe UI', 12),
                                     justify='center')
        instruction_label.pack(pady=10)
        
        # Th√™m button ƒë·ªÉ install tksheet
        install_btn = ttk.Button(error_frame,
                                text="üì¶ C√†i ƒë·∫∑t Tksheet",
                                command=self.install_tksheet)
        install_btn.pack(pady=10)
        
    def install_tksheet(self):
        """C√†i ƒë·∫∑t tksheet module"""
        try:
            import subprocess
            import sys
            messagebox.showinfo("C√†i ƒë·∫∑t", "ƒêang c√†i ƒë·∫∑t tksheet...\nVui l√≤ng ƒë·ª£i...")
            result = subprocess.run([sys.executable, "-m", "pip", "install", "tksheet>=7.5.0"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                messagebox.showinfo("Th√†nh c√¥ng", "C√†i ƒë·∫∑t tksheet th√†nh c√¥ng!\nVui l√≤ng restart ·ª©ng d·ª•ng.")
            else:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c√†i ƒë·∫∑t tksheet:\n{result.stderr}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói c√†i ƒë·∫∑t: {str(e)}")
        
    def create_header(self):
        """T·∫°o header v·ªõi info v√† controls gi·ªëng Google Sheets"""
        # Header container v·ªõi padding
        header_container = ttk.Frame(self.main_frame)
        header_container.pack(fill='x', padx=15, pady=(15, 10))
        
        # Title row
        title_row = ttk.Frame(header_container)
        title_row.pack(fill='x', pady=(0, 8))
        
        # Main title v·ªõi Google-style icon
        title_frame = ttk.Frame(title_row)
        title_frame.pack(side='left')
        
        # Icon v√† title
        # icon_label = ttk.Label(title_frame, 
        #                       text="üìä", 
        #                       font=('Segoe UI', 16))
        # icon_label.pack(side='left', padx=(0, 8))
        
        # title_label = ttk.Label(title_frame,
        #                        text="Sheets View",
        #                        font=('Segoe UI', 16, 'bold'),
        #                        foreground='#1a73e8')
        # title_label.pack(side='left')
        
        # Sheet ID info
        sheet_id = self.config.get_google_config().get('test_sheet_id', '')
        sheet_info_frame = ttk.Frame(title_row)
        sheet_info_frame.pack(side='left')
        
        ttk.Label(sheet_info_frame,
                 text="Sheet ID:",
                 font=('Segoe UI', 9),
                 foreground='#5f6368').pack(side='left', padx=(0, 5))
                 
        # sheet_id_display = sheet_id[:20] + "..." if len(sheet_id) > 20 else sheet_id
        ttk.Label(sheet_info_frame,
                 text=sheet_id,
                 font=('Segoe UI', 9, 'bold'),
                 foreground='#137333').pack(side='left')
        
        # Toolbar row gi·ªëng Google Sheets
        toolbar_row = ttk.Frame(header_container)
        toolbar_row.pack(fill='x')
        
        # Left toolbar
        left_toolbar = ttk.Frame(toolbar_row)
        left_toolbar.pack(side='left')
        
        # Action buttons v·ªõi Google style
        self.refresh_btn = ttk.Button(left_toolbar, 
                                     text="üîÑ Refresh",
                                     command=self.refresh_data)
        self.refresh_btn.pack(side='left', padx=(0, 8))
        
        # self.add_btn = ttk.Button(left_toolbar,
        #                          text="‚ûï Add Row", 
        #                          command=self.add_row)
        # self.add_btn.pack(side='left', padx=(0, 8))
        
        # self.save_btn = ttk.Button(left_toolbar,
        #                           text="üíæ Save Changes",
        #                           command=self.save_changes)
        # self.save_btn.pack(side='left', padx=(0, 8))
        
        # self.export_btn = ttk.Button(left_toolbar,
        #                             text="üì§ Export",
        #                             command=self.export_data)
        # self.export_btn.pack(side='left', padx=(0, 8))
                
        # Right toolbar - Search
        right_toolbar = ttk.Frame(toolbar_row)
        right_toolbar.pack(side='right')
        
        search_frame = ttk.Frame(right_toolbar)
        search_frame.pack(side='right')
        
        # Search v·ªõi Google style
        search_icon = ttk.Label(search_frame, text="üîç", font=('Segoe UI', 10))
        search_icon.pack(side='left', padx=(0, 5))
        
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search)
        self.search_entry = ttk.Entry(search_frame, 
                                textvariable=self.search_var, 
                                width=25,
                                font=('Segoe UI', 10))
        self.search_entry.pack(side='left')
        self.search_entry.insert(0, "Search data...")
        
        # Bind events cho search entry
        self.search_entry.bind('<FocusIn>', self.on_search_focus_in)
        self.search_entry.bind('<FocusOut>', self.on_search_focus_out)
        
    def create_tksheet_table(self):
        """T·∫°o b·∫£ng Tksheet gi·ªëng Google Sheets"""
        if not TKSHEET_AVAILABLE:
            return
            
        # Table container v·ªõi margin gi·ªëng Google Sheets
        table_container = ttk.Frame(self.main_frame)
        table_container.pack(fill='both', expand=True, padx=15, pady=(0, 10))
        
        # T·∫°o Tksheet widget v·ªõi responsive settings
        self.sheet_widget = tksheet.Sheet(
            table_container,
            page_up_down_select_row=True,
            expand_sheet_if_paste_too_big=True,
            empty_horizontal=0,
            empty_vertical=0,
            show_horizontal_grid=True,
            show_vertical_grid=True,
            # Kh√¥ng set fixed width/height ƒë·ªÉ responsive
            auto_resize_columns=False,  # T·∫Øt auto resize ƒë·ªÉ d√πng custom responsive
        )
        
        # Configure Google Sheets styling
        self.configure_sheet_styling()
        
        # Pack the sheet
        self.sheet_widget.pack(fill='both', expand=True)
        
        # Bind events
        self.setup_sheet_bindings()
        
    def configure_sheet_styling(self):
        """C·∫•u h√¨nh styling gi·ªëng Google Sheets"""
        if not self.sheet_widget:
            return
            
        # Google Sheets colors
        self.sheet_widget.set_options(
            font=('Segoe UI', 11, 'normal'),
            header_font=('Segoe UI', 11, 'bold'),
            table_bg='white',
            table_fg='black',
            table_selected_cells_bg='#e8f0fe',
            table_selected_cells_fg='#1a73e8',
            table_selected_rows_bg='#e8f0fe',
            table_selected_rows_fg='#1a73e8',
            table_selected_columns_bg='#e8f0fe', 
            table_selected_columns_fg='#1a73e8',
            header_bg='#f8f9fa',
            header_fg='#202124',
            header_selected_cells_bg='#d2e3fc',
            header_selected_cells_fg='#1a73e8',
            index_bg='#f8f9fa',
            index_fg='#202124',
            index_selected_cells_bg='#d2e3fc',
            index_selected_cells_fg='#1a73e8',
            top_left_bg='#f8f9fa',
            top_left_fg='#202124',
            outline_thickness=1,
            outline_color='#dadce0',
            grid_color='#dadce0',
            header_border_fg='#dadce0',
            index_border_fg='#dadce0'
        )
        
        # Enable c√°c t√≠nh nƒÉng editing
        self.sheet_widget.enable_bindings([
            "single_select",
            "row_select", 
            "column_select",
            "column_width_resize",
            "row_height_resize",
            "double_click_column_resize",
            "right_click_popup_menu",
            "copy",
            "paste",
            "delete",
            "edit_cell"
        ])
        
    def setup_sheet_bindings(self):
        """Thi·∫øt l·∫≠p event bindings cho sheet"""
        if not self.sheet_widget:
            return
            
        # Bind cell edit events
        self.sheet_widget.extra_bindings([
            ("cell_select", self.on_cell_select),
            ("begin_edit_cell", self.on_begin_edit),
            ("end_edit_cell", self.on_end_edit),
            ("right_click_popup_menu", self.on_right_click)
        ])
        
    def setup_headers_and_columns(self):
        """Thi·∫øt l·∫≠p headers v√† columns v·ªõi k√≠ch th∆∞·ªõc responsive"""
        if not self.sheet_widget:
            return
            
        # ƒê·ªãnh nghƒ©a headers
        headers = [
            "STT",
            "T√™n Tr∆∞·ªùng", 
            "Admin",
            "M·∫≠t kh·∫©u",
            "Link Driver D·ªØ li·ªáu",
            "Ng∆∞·ªùi x·ª≠ l√Ω",
            "SL GV n·∫°p",
            "SL HS n·∫°p", 
            "Notes"
        ]
        
        # Set headers
        self.sheet_widget.headers(headers)
        
        # Thi·∫øt l·∫≠p alignment cho c√°c c·ªôt ngay sau khi set headers
        self.setup_column_alignment()
        
        # Set column widths t·ªëi ∆∞u v·ªõi responsive design
        # S·ª≠ d·ª•ng ph·∫ßn trƒÉm ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n chi·∫øm h·∫øt chi·ªÅu r·ªông
        self.setup_responsive_columns()
        
        # Bind resize event ƒë·ªÉ c·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc khi window thay ƒë·ªïi
        self.sheet_widget.bind('<Configure>', self.on_window_resize)
        
    def setup_responsive_columns(self):
        """Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ªôt responsive"""
        if not self.sheet_widget:
            return
            
        try:
            # L·∫•y chi·ªÅu r·ªông hi·ªán t·∫°i c·ªßa sheet
            sheet_width = self.sheet_widget.winfo_width()
            
            # N·∫øu ch∆∞a ƒë∆∞·ª£c render, s·ª≠ d·ª•ng default width
            if sheet_width <= 1:
                sheet_width = 1200  # Default width
            
            # ƒê·ªãnh nghƒ©a ph·∫ßn trƒÉm cho t·ª´ng c·ªôt (t·ªïng = 100%)
            column_percentages = [
                5,   # STT - nh·ªè
                15,  # T√™n Tr∆∞·ªùng - trung b√¨nh  
                15,  # Admin - l·ªõn
                8,  # M·∫≠t kh·∫©u - trung b√¨nh
                8,  # Link Driver D·ªØ li·ªáu - r·∫•t l·ªõn
                8,  # Ng∆∞·ªùi x·ª≠ l√Ω - trung b√¨nh
                5,   # SL GV n·∫°p - nh·ªè
                5,   # SL HS n·∫°p - nh·ªè
                15   # Notes - trung b√¨nh
            ]
            
            # T√≠nh to√°n width th·ª±c t·∫ø cho t·ª´ng c·ªôt
            column_widths = []
            for percentage in column_percentages:
                width = int(sheet_width * percentage / 100)
                # ƒê·∫£m b·∫£o width t·ªëi thi·ªÉu
                min_width = 50 if percentage <= 8 else 80
                width = max(width, min_width)
                column_widths.append(width)
            
            # Apply column widths
            for i, width in enumerate(column_widths):
                self.sheet_widget.column_width(column=i, width=width)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error setting responsive columns: {e}")
            # Fallback to fixed widths for 9 columns
            default_widths = [50, 120, 150, 120, 200, 100, 80, 80, 100]
            for i, width in enumerate(default_widths):
                self.sheet_widget.column_width(column=i, width=width)
    
    def setup_column_alignment(self):
        """Thi·∫øt l·∫≠p alignment cho c√°c c·ªôt c·∫ßn cƒÉn gi·ªØa"""
        if not self.sheet_widget:
            return
            
        try:
            # C√°c c·ªôt c·∫ßn cƒÉn gi·ªØa: STT (0), Ng∆∞·ªùi x·ª≠ l√Ω (5), SL GV n·∫°p (6), SL HS n·∫°p (7)
            center_columns = [0, 5, 6, 7]
            
            for col in center_columns:
                try:
                    # Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p ƒë·ªÉ align c·ªôt
                    self.sheet_widget.align_columns(columns=[col], align="center")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error aligning column {col}: {e}")
                    # Fallback method
                    try:
                        # Set default alignment cho c·ªôt
                        self.sheet_widget.set_column_data(
                            column=col,
                            align="center"
                        )
                    except:
                        pass
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Error in setup_column_alignment: {e}")
            pass
    
    def on_window_resize(self, event=None):
        """X·ª≠ l√Ω khi window ƒë∆∞·ª£c resize"""
        if not self.sheet_widget:
            return
            
        try:
            # Ch·ªâ x·ª≠ l√Ω resize event t·ª´ sheet widget ch√≠nh
            if event and event.widget != self.sheet_widget:
                return
                
            # Delay m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o widget ƒë√£ ƒë∆∞·ª£c resize ho√†n to√†n
            self.sheet_widget.after(100, self.setup_responsive_columns)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error handling window resize: {e}")
    
    def on_main_frame_resize(self, event=None):
        """X·ª≠ l√Ω khi main frame ƒë∆∞·ª£c resize"""
        try:
            # Ch·ªâ x·ª≠ l√Ω n·∫øu event t·ª´ main_frame
            if event and event.widget == self.main_frame:
                # Delay ƒë·ªÉ ƒë·∫£m b·∫£o sheet widget c≈©ng ƒë∆∞·ª£c resize
                if self.sheet_widget:
                    self.sheet_widget.after(150, self.setup_responsive_columns)
        except Exception as e:
            print(f"‚ö†Ô∏è Error handling main frame resize: {e}")
        
    def create_status_bar(self):
        """T·∫°o status bar gi·ªëng Google Sheets"""
        status_container = ttk.Frame(self.main_frame)
        status_container.pack(fill='x', padx=15, pady=(5, 15))
        
        # Separator tr√™n status bar
        separator = ttk.Separator(status_container, orient='horizontal')
        separator.pack(fill='x', pady=(0, 8))
        
        status_frame = ttk.Frame(status_container)
        status_frame.pack(fill='x')
        
        # Status message
        self.status_var = tk.StringVar(value="üìä S·∫µn s√†ng t·∫£i d·ªØ li·ªáu")
        status_label = ttk.Label(status_frame, 
                                textvariable=self.status_var,
                                font=('Segoe UI', 9),
                                foreground='#5f6368')
        status_label.pack(side='left')
        
        # Right side info
        right_info = ttk.Frame(status_frame)
        right_info.pack(side='right')
        
        # Row count
        self.row_count_var = tk.StringVar(value="0 rows")
        row_count_label = ttk.Label(right_info, 
                                   textvariable=self.row_count_var,
                                   font=('Segoe UI', 9, 'bold'),
                                   foreground='#137333')
        row_count_label.pack(side='right', padx=(10, 0))
        
        # Last updated
        self.last_updated_var = tk.StringVar(value="")
        updated_label = ttk.Label(right_info,
                                 textvariable=self.last_updated_var,
                                 font=('Segoe UI', 9),
                                 foreground='#5f6368')
        updated_label.pack(side='right', padx=(10, 0))
        
    def load_sheets_data(self):
        """Load d·ªØ li·ªáu t·ª´ Google Sheets"""
        if not TKSHEET_AVAILABLE:
            return
            
        try:
            self.status_var.set("üîÑ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets...")
            self.refresh_btn.config(state='disabled')
            
            # Get sheet config
            google_config = self.config.get_google_config()
            sheet_id = google_config.get('test_sheet_id')
            
            if not sheet_id:
                self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y SHEET_ID trong config!")
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y SHEET_ID trong config!")
                return
                
            # Initialize extractor
            self.extractor = GoogleSheetsExtractor()
            
            # ƒê·ªãnh nghƒ©a columns c·∫ßn extract
            required_columns = [
                'T√™n tr∆∞·ªùng',
                'Admin', 
                'M·∫≠t kh·∫©u',
                'Link driver d·ªØ li·ªáu',
                'Ng∆∞·ªùi x·ª≠ l√Ω',
                'S·ªë l∆∞·ª£ng GV n·∫°p',
                'S·ªë l∆∞·ª£ng HS n·∫°p',
                'Notes'
            ]
            
            # Get data from sheets
            sheet_data = self.extractor.extract_required_columns(
                sheet_id=sheet_id,
                required_columns=required_columns
            )
            
            if not sheet_data:
                self.status_var.set("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong sheet")
                self.row_count_var.set("0 rows")
                return
                
            # Setup headers v√† load data
            self.setup_headers_and_columns()
            self.load_data_to_sheet(sheet_data)
            
            # Update status
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S")
            self.status_var.set("‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng")
            self.last_updated_var.set(f"Updated: {current_time}")
            
        except Exception as e:
            error_msg = str(e)
            self.status_var.set(f"‚ùå L·ªói: {error_msg}")
            messagebox.showerror("L·ªói t·∫£i d·ªØ li·ªáu", 
                               f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Google Sheets:\n{error_msg}")
        finally:
            self.refresh_btn.config(state='normal')
            
    def load_data_to_sheet(self, sheet_data):
        """Load d·ªØ li·ªáu v√†o Tksheet"""
        if not self.sheet_widget or not sheet_data:
            return
            
        # Clear existing data
        self.sheet_widget.set_sheet_data([[]])
        
        # Parse data
        if 'data' not in sheet_data:
            self.row_count_var.set("0 rows")
            return
            
        rows = sheet_data['data']
        if not rows:
            self.row_count_var.set("0 rows")
            return
        
        # Convert data to table format
        table_data = []
        self.data = []
        
        for i, row in enumerate(rows):
            row_data = [
                i + 1,  # STT
                row.get('T√™n tr∆∞·ªùng', '') or '',
                row.get('Admin', '') or '',
                row.get('M·∫≠t kh·∫©u', '') or '',
                row.get('Link driver d·ªØ li·ªáu', '') or '',
                row.get('Ng∆∞·ªùi x·ª≠ l√Ω', '') or '',
                row.get('S·ªë l∆∞·ª£ng GV n·∫°p', '') or '',
                row.get('S·ªë l∆∞·ª£ng HS n·∫°p', '') or '',
                row.get('Notes', '') or ''
            ]
            table_data.append(row_data)
            self.data.append(row_data)
        
        # Set data to sheet
        self.sheet_widget.set_sheet_data(table_data)
        self.filtered_data = table_data.copy()
        
        # Update row count
        self.row_count_var.set(f"{len(table_data)} rows")
        
        # Apply responsive columns instead of auto-fit
        self.setup_responsive_columns()
        
        # Apply cell styling cho c√°c c·ªôt c·∫ßn cƒÉn gi·ªØa v√† m√†u s·∫Øc
        self.apply_cell_styling()
        
        # Scroll to bottom ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi nh·∫•t
        self.scroll_to_bottom()
        
    def scroll_to_bottom(self):
        """Scroll xu·ªëng d∆∞·ªõi c√πng ƒë·ªÉ xem d·ªØ li·ªáu m·ªõi nh·∫•t"""
        if not self.sheet_widget:
            return
            
        try:
            # L·∫•y s·ªë h√†ng hi·ªán t·∫°i
            total_rows = self.sheet_widget.get_total_rows()
            if total_rows > 0:
                # Scroll ƒë·∫øn h√†ng cu·ªëi c√πng
                last_row = total_rows - 1
                self.sheet_widget.see(row=last_row, column=0)
                self.status_var.set(f"üìç ƒê√£ cu·ªôn xu·ªëng cu·ªëi (row {last_row + 1})")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói scroll to bottom: {e}")
            pass
            
    def apply_cell_styling(self):
        """√Åp d·ª•ng styling cho c√°c c·ªôt: cƒÉn gi·ªØa v√† m√†u s·∫Øc"""
        if not self.sheet_widget:
            return
            
        try:
            # L·∫•y t·ªïng s·ªë h√†ng v√† c·ªôt
            total_rows = self.sheet_widget.get_total_rows()
            
            # C√°c c·ªôt c·∫ßn cƒÉn gi·ªØa: STT (0), Ng∆∞·ªùi x·ª≠ l√Ω (5), SL GV n·∫°p (6), SL HS n·∫°p (7)
            center_columns = [0, 5, 6, 7]
            
            # Thi·∫øt l·∫≠p cƒÉn gi·ªØa cho to√†n b·ªô c·ªôt tr∆∞·ªõc
            for col in center_columns:
                try:
                    # Align to√†n b·ªô c·ªôt
                    self.sheet_widget.align_columns(columns=[col], align="center")
                except:
                    # Fallback: align t·ª´ng cell trong c·ªôt
                    for row in range(total_rows):
                        try:
                            self.sheet_widget.align_cells(row, col, "center")
                        except:
                            pass
            
            # X·ª≠ l√Ω styling cho t·ª´ng row
            for row in range(total_rows):
                current_data = self.sheet_widget.get_sheet_data()
                if row >= len(current_data):
                    continue
                    
                row_data = current_data[row]
                
                # X·ª≠ l√Ω m√†u s·∫Øc cho c·ªôt "Ng∆∞·ªùi x·ª≠ l√Ω" (c·ªôt 5)
                if len(row_data) > 5:
                    person_name = str(row_data[5]).strip()
                    if person_name and person_name in self.person_colors:
                        color = self.person_colors[person_name]
                        try:
                            # Set background color cho cell (kh√¥ng d√πng align trong highlight_cells)
                            self.sheet_widget.highlight_cells(
                                row=row,
                                column=5,
                                bg=color,
                                fg='#000000',  # Ch·ªØ ƒëen ƒë·ªÉ d·ªÖ ƒë·ªçc
                                redraw=False
                            )
                        except Exception as e:
                            # print(f"‚ö†Ô∏è Error setting color for {person_name}: {e}")
                            pass
            
            # Redraw sau khi √°p d·ª•ng t·∫•t c·∫£ styling
            try:
                self.sheet_widget.refresh()
            except:
                pass
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error applying cell styling: {e}")
            pass
                
    def auto_fit_columns(self):
        """Deprecated: S·ª≠ d·ª•ng responsive columns thay v√¨ auto-fit"""
        # Chuy·ªÉn sang s·ª≠ d·ª•ng responsive design
        self.setup_responsive_columns()
        
    def refresh_data(self):
        """Refresh d·ªØ li·ªáu v√† scroll xu·ªëng cu·ªëi"""
        self.load_sheets_data()
        # Sau khi load xong, scroll_to_bottom v√† apply_cell_styling ƒë√£ ƒë∆∞·ª£c g·ªçi trong load_data_to_sheet
        
    def add_row(self):
        """Th√™m row m·ªõi"""
        if not self.sheet_widget:
            messagebox.showwarning("Th√¥ng b√°o", "Sheet ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return
            
        # Th√™m row tr·ªëng v·ªõi 9 c·ªôt
        new_row = ["", "", "", "", "", "", "", "", ""]
        current_data = self.sheet_widget.get_sheet_data()
        current_data.append(new_row)
        self.sheet_widget.set_sheet_data(current_data)
        
        # √Åp d·ª•ng styling
        self.apply_cell_styling()
        
        # Update row count
        self.row_count_var.set(f"{len(current_data)} rows")
        
        # Focus v√†o row m·ªõi
        new_row_index = len(current_data) - 1
        self.sheet_widget.select_row(new_row_index)
        self.sheet_widget.see(row=new_row_index, column=0)
        
    def save_changes(self):
        """L∆∞u thay ƒë·ªïi"""
        if not self.sheet_widget:
            return
            
        try:
            # Get current data from sheet
            current_data = self.sheet_widget.get_sheet_data()
            
            messagebox.showinfo("L∆∞u thay ƒë·ªïi", 
                              f"ƒê√£ l∆∞u {len(current_data)} rows.\n\n"
                              "L∆∞u √Ω: ƒê√¢y l√† demo - d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªÅ Google Sheets.")
                              
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u thay ƒë·ªïi:\n{str(e)}")
            
    def export_data(self):
        """Export d·ªØ li·ªáu"""
        if not self.sheet_widget:
            return
            
        try:
            from tkinter import filedialog
            import csv
            
            # Ch·ªçn file ƒë·ªÉ save
            file_path = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Xu·∫•t d·ªØ li·ªáu"
            )
            
            if file_path:
                # Get data v√† headers
                data = self.sheet_widget.get_sheet_data()
                headers = ["STT", "T√™n Tr∆∞·ªùng", "Admin", "M·∫≠t kh·∫©u", 
                          "Link Driver D·ªØ li·ªáu", "Ng∆∞·ªùi x·ª≠ l√Ω", "SL GV n·∫°p", "SL HS n·∫°p", "Notes"]
                
                # Write to CSV
                with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow(headers)
                    writer.writerows(data)
                    
                messagebox.showinfo("Xu·∫•t d·ªØ li·ªáu", f"ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!\nFile: {file_path}")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu:\n{str(e)}")
        
    def on_search(self, *args):
        """X·ª≠ l√Ω search v·ªõi Tksheet"""
        if not self.sheet_widget:
            return
            
        search_term = self.search_var.get().lower()
        
        # N·∫øu search term l√† placeholder th√¨ b·ªè qua
        if search_term == "search data...":
            return
            
        if not search_term:
            # Hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£ data
            self.sheet_widget.set_sheet_data(self.data)
            self.row_count_var.set(f"{len(self.data)} rows")
            # √Åp d·ª•ng l·∫°i styling
            self.apply_cell_styling()
            return
            
        # Filter data
        filtered_data = []
        for row in self.data:
            # Check if search term matches any column
            match = any(search_term in str(cell).lower() for cell in row)
            if match:
                filtered_data.append(row)
                
        # Update sheet v·ªõi filtered data
        self.sheet_widget.set_sheet_data(filtered_data)
        self.filtered_data = filtered_data
        
        # √Åp d·ª•ng styling cho filtered data
        self.apply_cell_styling()
        
        # Update row count
        total_rows = len(self.data)
        filtered_rows = len(filtered_data)
        self.row_count_var.set(f"{filtered_rows} rows (filtered from {total_rows})")
        
    def on_search_focus_in(self, event):
        """X·ª≠ l√Ω khi focus v√†o search entry"""
        if self.search_entry.get() == "Search data...":
            self.search_entry.delete(0, tk.END)
            
    def on_search_focus_out(self, event):
        """X·ª≠ l√Ω khi focus ra kh·ªèi search entry"""
        if not self.search_entry.get():
            self.search_entry.insert(0, "Search data...")
            
    def on_cell_select(self, event):
        """X·ª≠ l√Ω khi select cell - auto select whole row"""
        try:
            row = event.row
            col = event.column
            
            if row is not None:
                # Auto-select the whole row when user clicks on any cell
                self.sheet_widget.select_row(row)
                
                # Update status v·ªõi th√¥ng tin row
                if col is not None:
                    headers = ["STT", "T√™n Tr∆∞·ªùng", "Admin", "M·∫≠t kh·∫©u", 
                              "Link Driver D·ªØ li·ªáu", "Ng∆∞·ªùi x·ª≠ l√Ω", "SL GV n·∫°p", "SL HS n·∫°p", "Notes"]
                    col_name = headers[col] if col < len(headers) else f"Column {col}"
                    self.status_var.set(f"üìç Selected Row {row + 1}: {col_name}")
                    
                    # Log selection for debugging
                    print(f"üîç Cell selected -> Auto-selected row {row + 1}")
                    
                    # Try to get and display selected school info
                    try:
                        current_data = self.sheet_widget.get_sheet_data()
                        if row < len(current_data):
                            row_data = current_data[row]
                            school_name = row_data[1] if len(row_data) > 1 else 'N/A'
                            admin_email = row_data[2] if len(row_data) > 2 else 'N/A'
                            print(f"   School: {school_name} ({admin_email})")
                    except Exception as e:
                        print(f"   Error getting school info: {e}")
        except Exception as e:
            print(f"‚ùå Error in on_cell_select: {e}")
            pass
            
    def on_begin_edit(self, event):
        """X·ª≠ l√Ω khi b·∫Øt ƒë·∫ßu edit cell"""
        try:
            row = event.row
            col = event.column
            if row is not None and col is not None:
                self.status_var.set(f"‚úèÔ∏è Editing cell Row {row + 1}, Column {col + 1}")
        except:
            pass
            
    def on_end_edit(self, event):
        """X·ª≠ l√Ω khi k·∫øt th√∫c edit cell"""
        try:
            row = event.row
            col = event.column 
            if row is not None and col is not None:
                # C·∫≠p nh·∫≠t data backup
                current_data = self.sheet_widget.get_sheet_data()
                if search_term := self.search_var.get().lower():
                    if search_term != "search data...":
                        # N·∫øu ƒëang filter th√¨ c·∫≠p nh·∫≠t c·∫£ original data
                        self.update_original_data_after_edit(row, col, current_data[row][col])
                else:
                    self.data = current_data.copy()
                
                # √Åp d·ª•ng l·∫°i styling sau khi edit (ƒë·∫∑c bi·ªát quan tr·ªçng cho c·ªôt "Ng∆∞·ªùi x·ª≠ l√Ω")
                self.apply_cell_styling()
                    
                self.status_var.set(f"‚úÖ Saved changes to Row {row + 1}, Column {col + 1}")
        except:
            pass
            
    def update_original_data_after_edit(self, filtered_row, col, new_value):
        """C·∫≠p nh·∫≠t original data sau khi edit trong filtered view"""
        try:
            # T√¨m row t∆∞∆°ng ·ª©ng trong original data
            filtered_data = self.sheet_widget.get_sheet_data()
            if filtered_row < len(filtered_data):
                row_data = filtered_data[filtered_row]
                # T√¨m trong original data d·ª±a tr√™n STT ho·∫∑c unique identifier
                stt = row_data[0]  # STT column
                for i, orig_row in enumerate(self.data):
                    if orig_row[0] == stt:
                        self.data[i][col] = new_value
                        break
        except:
            pass
            
    def on_right_click(self, event):
        """X·ª≠ l√Ω right click menu"""
        try:
            # T·∫°o context menu ƒë∆°n gi·∫£n
            menu = tk.Menu(self.sheet_widget, tearoff=0)
            menu.add_command(label="üìã Copy", command=lambda: self.sheet_widget.copy())
            menu.add_command(label="üìÑ Paste", command=lambda: self.sheet_widget.paste())
            menu.add_separator()
            menu.add_command(label="‚ûï Insert Row Above", command=self.insert_row_above)
            menu.add_command(label="‚ûï Insert Row Below", command=self.insert_row_below)
            menu.add_separator()
            menu.add_command(label="‚ùå Delete Row", command=self.delete_selected_row)
            
            # Show menu
            menu.tk_popup(event.x_root, event.y_root)
        except:
            pass
            
    def insert_row_above(self):
        """Ch√®n row tr·ªëng ph√≠a tr√™n row hi·ªán t·∫°i"""
        try:
            selected_rows = self.sheet_widget.get_selected_rows()
            if selected_rows:
                row_index = min(selected_rows)
                new_row = ["", "", "", "", "", "", "", "", ""]
                self.sheet_widget.insert_row(row_index, new_row)
                self.update_row_count()
                # √Åp d·ª•ng styling sau khi th√™m row
                self.apply_cell_styling()
        except:
            pass
            
    def insert_row_below(self):
        """Ch√®n row tr·ªëng ph√≠a d∆∞·ªõi row hi·ªán t·∫°i"""
        try:
            selected_rows = self.sheet_widget.get_selected_rows()
            if selected_rows:
                row_index = max(selected_rows) + 1
                new_row = ["", "", "", "", "", "", "", "", ""]
                self.sheet_widget.insert_row(row_index, new_row)
                self.update_row_count()
                # √Åp d·ª•ng styling sau khi th√™m row
                self.apply_cell_styling()
        except:
            pass
            
    def delete_selected_row(self):
        """X√≥a row ƒë∆∞·ª£c ch·ªçn"""
        try:
            selected_rows = self.sheet_widget.get_selected_rows()
            if selected_rows:
                # Confirm deletion
                if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a {len(selected_rows)} row(s)?"):
                    # Delete from highest index to lowest to avoid index shifting
                    for row_index in sorted(selected_rows, reverse=True):
                        self.sheet_widget.delete_row(row_index)
                    self.update_row_count()
                    # √Åp d·ª•ng styling sau khi x√≥a row
                    self.apply_cell_styling()
        except:
            pass
            
    def update_row_count(self):
        """C·∫≠p nh·∫≠t row count sau khi th√™m/x√≥a row"""
        try:
            current_data = self.sheet_widget.get_sheet_data()
            self.row_count_var.set(f"{len(current_data)} rows")
        except:
            pass
            
    def get_selected_row_data(self):
        """L·∫•y d·ªØ li·ªáu t·ª´ row ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x·ª≠ l√Ω workflow"""
        try:
            if not self.sheet_widget:
                print("‚ùå No sheet_widget")
                return None
                
            # Force refresh selection ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ selection m·ªõi nh·∫•t
            self.sheet_widget.refresh()
                
            # Try multiple ways to get selected row
            selected_rows = self.sheet_widget.get_selected_rows()
            selected_cells = self.sheet_widget.get_selected_cells()
            
            print(f"üîç DEBUG Selection:")
            print(f"   Selected rows: {selected_rows}")
            print(f"   Selected cells: {selected_cells}")
            
            # Determine row index
            row_index = None
            
            # Method 1: From selected rows
            if selected_rows:
                row_index = min(selected_rows)
                print(f"   Using row from selected_rows: {row_index}")
            
            # Method 2: From selected cells (fallback)
            elif selected_cells:
                # Get row from first selected cell
                first_cell = selected_cells[0]
                row_index = first_cell[0]  # (row, col) tuple
                print(f"   Using row from selected_cells: {row_index}")
            
            if row_index is None:
                print("‚ùå No row selected")
                return None
                
            current_data = self.sheet_widget.get_sheet_data()
            print(f"   Total rows in data: {len(current_data)}")
            
            if row_index >= len(current_data):
                print(f"‚ùå Row index {row_index} >= data length {len(current_data)}")
                return None
                
            row_data = current_data[row_index]
            print(f"   Row {row_index} data: {row_data}")
            
            # Convert sang dictionary format nh∆∞ extractor tr·∫£ v·ªÅ
            school_data = {
                'STT': row_data[0] if len(row_data) > 0 else '',
                'T√™n tr∆∞·ªùng': row_data[1] if len(row_data) > 1 else '',
                'Admin': row_data[2] if len(row_data) > 2 else '',
                'M·∫≠t kh·∫©u': row_data[3] if len(row_data) > 3 else '',
                'Link driver d·ªØ li·ªáu': row_data[4] if len(row_data) > 4 else '',
                'Ng∆∞·ªùi x·ª≠ l√Ω': row_data[5] if len(row_data) > 5 else '',
                'S·ªë l∆∞·ª£ng GV n·∫°p': row_data[6] if len(row_data) > 6 else '',
                'S·ªë l∆∞·ª£ng HS n·∫°p': row_data[7] if len(row_data) > 7 else '',
                'Notes': row_data[8] if len(row_data) > 8 else ''
            }
            
            print(f"   Converted to school_data: {school_data}")
            return school_data
            
        except Exception as e:
            print(f"‚ùå Error getting selected row data: {e}")
            import traceback
            traceback.print_exc()
            return None
            
    def get_selected_row_info(self):
        """L·∫•y th√¥ng tin v·ªÅ row ƒë∆∞·ª£c ch·ªçn (cho hi·ªÉn th·ªã)"""
        try:
            if not self.sheet_widget:
                return "Kh√¥ng c√≥ sheet data"
                
            selected_rows = self.sheet_widget.get_selected_rows()
            selected_cells = self.sheet_widget.get_selected_cells()
            
            print(f"üîç DEBUG Row Info:")
            print(f"   Selected rows: {selected_rows}")
            print(f"   Selected cells: {selected_cells}")
            
            # Determine row index
            row_index = None
            
            if selected_rows:
                row_index = min(selected_rows)
            elif selected_cells:
                row_index = selected_cells[0][0]  # Get row from first cell
                
            if row_index is None:
                return "Ch∆∞a ch·ªçn row n√†o"
                
            school_data = self.get_selected_row_data()
            
            if school_data:
                school_name = school_data.get('T√™n tr∆∞·ªùng', 'N/A')
                admin_email = school_data.get('Admin', 'N/A')
                return f"Row {row_index + 1}: {school_name} ({admin_email})"
            else:
                return f"Row {row_index + 1}: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"
                
        except Exception as e:
            print(f"‚ùå Error in get_selected_row_info: {e}")
            return f"L·ªói: {str(e)}"