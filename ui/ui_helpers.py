#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File: ui_helpers.py
Purpose: Helper methods cho UI main window
Author: School Process Application
Date: 2025-08-07
Location: ui/ui_helpers.py
"""

import pandas as pd
import os
import subprocess
import platform
from tkinter import messagebox
from openpyxl.styles import Alignment, Border, Side

def export_teachers_to_excel(teachers_list, school_name, school_year, log_callback=None):
    """Export danh s√°ch gi√°o vi√™n ra file Excel theo template"""
    try:
        def log(msg, level="info"):
            if log_callback:
                log_callback(msg, level)
            else:
                print(f"[{level}] {msg}")
        
        # T·∫°o d·ªØ li·ªáu theo c·∫•u tr√∫c template
        df_data = []
        for i, teacher in enumerate(teachers_list, 1):
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ c·∫•u tr√∫c API
            teacher_info = teacher.get('teacherInfo', {})
            
            row = {
                'STT': i,
                'T√™n gi√°o vi√™n': teacher_info.get('displayName', ''),
                'Ng√†y sinh': teacher_info.get('userBirthday', ''),
                'T√™n ƒëƒÉng nh·∫≠p': teacher_info.get('userName', ''),
                'M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu': teacher_info.get('pwd', '')
            }
            df_data.append(row)
        
        # T·∫°o DataFrame
        df = pd.DataFrame(df_data)
        
        # T·∫°o t√™n file
        safe_school_name = "".join(c for c in school_name if c.isalnum() or c in (' ', '-', '_')).strip()
        filename = f"DSGV_{safe_school_name}-{school_year}.xlsx"
        output_path = f"data/output/{filename}"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs("data/output", exist_ok=True)
        
        # L∆∞u file Excel
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='GIAO-VIEN', index=False)
            
            # Format Excel
            worksheet = writer.sheets['GIAO-VIEN']
            
            # T·∫°o border style
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            # CƒÉn gi·ªØa header (d√≤ng 1)
            for cell in worksheet[1]:
                cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = thin_border
            
            # CƒÉn gi·ªØa c√°c c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† th√™m border
            for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row):
                for cell in row:
                    # Th√™m border cho t·∫•t c·∫£ cells
                    cell.border = thin_border
                    
                    # CƒÉn gi·ªØa c√°c c·ªôt c·ª• th·ªÉ
                    col_name = worksheet.cell(row=1, column=cell.column).value
                    if col_name in ['STT', 'Ng√†y sinh', 'M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu']:
                        cell.alignment = Alignment(horizontal='center', vertical='center')
            
            # Auto-adjust column width
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        log(f"‚úÖ ƒê√£ xu·∫•t {len(teachers_list)} gi√°o vi√™n ra file Excel", "success")
        return output_path
        
    except Exception as e:
        log(f"‚ùå L·ªói export Excel: {str(e)}", "error")
        import traceback
        traceback.print_exc()
        return None


def export_students_to_excel(students_list, school_name, school_year, log_callback=None):
    """Export danh s√°ch h·ªçc sinh ra file Excel theo template"""
    try:
        def log(msg, level="info"):
            if log_callback:
                log_callback(msg, level)
            else:
                print(f"[{level}] {msg}")
        
        # T·∫°o d·ªØ li·ªáu theo c·∫•u tr√∫c template
        df_data = []
        for i, student in enumerate(students_list, 1):
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ c·∫•u tr√∫c API
            user_info = student.get('userInfo', {})
            
            # L·∫•y th√¥ng tin l·ªõp t·ª´ groupClass
            group_class = student.get('groupClass', [])
            class_name = ''
            if group_class and len(group_class) > 0:
                class_name = group_class[0].get('className', '')
            
            row = {
                'STT': i,
                'M√£ h·ªçc sinh': student.get('studentId', ''),
                'H·ªç v√† t√™n': user_info.get('displayName', ''),
                'Ng√†y sinh': user_info.get('userBirthday', ''),
                'Kh·ªëi': student.get('grade', ''),
                'L·ªõp': class_name,
                'T√†i kho·∫£n': user_info.get('userName', ''),
                'M·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu': user_info.get('pwd', ''),
                'M√£ ƒëƒÉng nh·∫≠p cho PH': user_info.get('codePin', '')
            }
            df_data.append(row)
        
        # T·∫°o DataFrame
        df = pd.DataFrame(df_data)
        
        # T·∫°o t√™n file
        safe_school_name = "".join(c for c in school_name if c.isalnum() or c in (' ', '-', '_')).strip()
        filename = f"DSHS_{safe_school_name}-{school_year}.xlsx"
        output_path = f"data/output/{filename}"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs("data/output", exist_ok=True)
        
        # L∆∞u file Excel
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Danh s√°ch HS to√†n tr∆∞·ªùng', index=False)
            
            # Format Excel
            worksheet = writer.sheets['Danh s√°ch HS to√†n tr∆∞·ªùng']
            
            # T·∫°o border style
            thin_border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            # CƒÉn gi·ªØa header (d√≤ng 1)
            for cell in worksheet[1]:
                cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = thin_border
            
            # CƒÉn gi·ªØa c√°c c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† th√™m border
            for row in worksheet.iter_rows(min_row=1, max_row=worksheet.max_row):
                for cell in row:
                    # Th√™m border cho t·∫•t c·∫£ cells
                    cell.border = thin_border
                    
                    # CƒÉn gi·ªØa c√°c c·ªôt c·ª• th·ªÉ
                    col_name = worksheet.cell(row=1, column=cell.column).value
                    if col_name in ['STT', 'M√£ h·ªçc sinh', 'Ng√†y sinh', 'Kh·ªëi', 'L·ªõp', 'M·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu', 'M√£ ƒëƒÉng nh·∫≠p cho PH']:
                        cell.alignment = Alignment(horizontal='center', vertical='center')
            
            # Auto-adjust column width
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        log(f"‚úÖ ƒê√£ xu·∫•t {len(students_list)} h·ªçc sinh ra file Excel", "success")
        return output_path
        
    except Exception as e:
        log(f"‚ùå L·ªói export Excel: {str(e)}", "error")
        import traceback
        traceback.print_exc()
        return None


def show_file_completion_dialog(file_path, data_type, log_callback=None):
    """Hi·ªÉn th·ªã dialog ho√†n th√†nh v√† h·ªèi c√≥ mu·ªën m·ªü file"""
    try:
        def log(msg, level="info"):
            if log_callback:
                log_callback(msg, level)
            else:
                print(f"[{level}] {msg}")
        
        result = messagebox.askyesno(
            "Ho√†n th√†nh", 
            f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng file {data_type}!\n\n"
            f"üìÑ File: {os.path.basename(file_path)}\n"
            f"üìÅ Th∆∞ m·ª•c: {os.path.dirname(file_path)}\n\n"
            f"B·∫°n c√≥ mu·ªën m·ªü file Excel ngay b√¢y gi·ªù?"
        )
        
        if result:
            try:
                if platform.system() == 'Windows':
                    os.startfile(file_path)
                elif platform.system() == 'Darwin':  # macOS
                    subprocess.run(['open', file_path])
                else:  # Linux
                    subprocess.run(['xdg-open', file_path])
                
                log(f"‚úÖ ƒê√£ m·ªü file {data_type}", "success")
            except Exception as e:
                log(f"‚ùå Kh√¥ng th·ªÉ m·ªü file: {str(e)}", "error")
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file:\n{str(e)}")
        
    except Exception as e:
        if log_callback:
            log_callback(f"‚ùå L·ªói hi·ªÉn th·ªã dialog: {str(e)}", "error")
        else:
            print(f"‚ùå L·ªói hi·ªÉn th·ªã dialog: {str(e)}")
