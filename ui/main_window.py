"""
Main UI Window for School Process Application
Modern Material Design v·ªõi Tkinter
"""

import tkinter as tk
import sys
import threading
import json
import os
import traceback
import subprocess
import platform
import base64
import glob

from tkinter import ttk, messagebox, filedialog
from datetime import datetime
from pathlib import Path
from app import SchoolProcessApp

# Th√™m project root v√†o Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config.config_manager import get_config
from config.onluyen_api import OnLuyenAPIClient
from extractors import GoogleSheetsExtractor
from converters import JSONToExcelTemplateConverter

class SchoolProcessMainWindow:
    """Main Window cho School Process Application"""
    
    # Singleton pattern
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(SchoolProcessMainWindow, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        """Kh·ªüi t·∫°o main window"""
        # Ch·ªâ kh·ªüi t·∫°o m·ªôt l·∫ßn
        if hasattr(self, '_initialized'):
            return
        self._initialized = True
        
        self.config = get_config()
        self.setup_main_window()
        self.setup_variables()
        self.setup_ui()
        self.setup_bindings()
        
        # Hi·ªÉn th·ªã th√¥ng tin nƒÉm h·ªçc hi·ªán t·∫°i n·∫øu c√≥
        self.root.after(1000, self._show_initial_school_year_info)
        
    def setup_main_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root = tk.Tk()
        self.root.title("School Process - ·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªùng h·ªçc")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # Icon v√† styling
        try:
            self.root.iconbitmap("assets/icon.ico")
        except:
            pass
            
        # Center window
        self.center_window()
        
        # Configure style
        self.setup_styles()
        
    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p styles cho UI"""
        self.style = ttk.Style()
        
        # Ch·ªçn theme modern
        self.style.theme_use('clam')
        
        # Custom colors - Material Design inspired
        self.colors = {
            'primary': '#1976D2',      # Blue
            'primary_dark': '#1565C0',
            'secondary': '#FF6F00',    # Orange
            'success': '#4CAF50',      # Green
            'warning': '#FF9800',      # Amber
            'error': '#F44336',        # Red
            'surface': '#FFFFFF',      # White
            'background': '#F5F5F5',   # Light Gray
            'text': '#212121',         # Dark Gray
            'text_secondary': '#757575' # Medium Gray
        }
        
        # Configure ttk styles
        self.style.configure('Title.TLabel', 
                           font=('Segoe UI', 16, 'bold'),
                           foreground=self.colors['primary'])
        
        self.style.configure('Heading.TLabel',
                           font=('Segoe UI', 12, 'bold'),
                           foreground=self.colors['text'])
        
        self.style.configure('Primary.TButton',
                           font=('Segoe UI', 10),
                           foreground='white')
        
        self.style.map('Primary.TButton',
                      background=[('active', self.colors['primary_dark']),
                                ('!active', self.colors['primary'])])
        
        self.style.configure('Success.TButton',
                           font=('Segoe UI', 10),
                           foreground='white')
        
        self.style.map('Success.TButton',
                      background=[('active', '#45A049'),
                                ('!active', self.colors['success'])])
                                
    def setup_variables(self):
        """Thi·∫øt l·∫≠p c√°c bi·∫øn"""
        self.current_task = tk.StringVar(value="S·∫µn s√†ng")
        self.progress_var = tk.DoubleVar()
        self.log_text = tk.StringVar()
        
        # Application state
        self.is_processing = False
        self.current_workflow = None
        self.client = None
        
        # School year state - m·∫∑c ƒë·ªãnh l√† 2025
        self.current_school_year = 2025
    
    @property
    def current_year(self):
        """Property ƒë·ªÉ compatibility v·ªõi app.py"""
        return self.current_school_year
    
    @current_year.setter
    def current_year(self, value):
        """Setter cho current_year"""
        self.current_school_year = value
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Main container
        self.main_frame = ttk.Frame(self.root, padding="10")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)
        self.main_frame.rowconfigure(1, weight=1)
        
        # Create UI sections
        self.create_header()
        self.create_main_content()
        self.create_status_bar()
        
    def create_header(self):
        """T·∫°o header v·ªõi ti√™u ƒë·ªÅ v√† th√¥ng tin"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        header_frame.columnconfigure(1, weight=1)
        
        # Logo/Icon placeholder
        logo_frame = ttk.Frame(header_frame, width=60, height=60)
        logo_frame.grid(row=0, column=0, padx=(0, 15), rowspan=2)
        logo_frame.grid_propagate(False)
        
        logo_label = ttk.Label(logo_frame, text="üè´", font=('Segoe UI', 24))
        logo_label.place(relx=0.5, rely=0.5, anchor='center')
        
        # Title
        title_label = ttk.Label(header_frame, 
                              text="School Process Application",
                              style='Title.TLabel')
        title_label.grid(row=0, column=1, sticky=(tk.W), pady=(5, 0))
        
        # Subtitle
        subtitle_label = ttk.Label(header_frame,
                                 text="·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªùng h·ªçc v·ªõi OnLuyen API",
                                 font=('Segoe UI', 10),
                                 foreground=self.colors['text_secondary'])
        subtitle_label.grid(row=1, column=1, sticky=(tk.W), pady=(0, 5))
        
        # Status indicator
        self.status_frame = ttk.Frame(header_frame)
        self.status_frame.grid(row=0, column=2, rowspan=2, padx=(15, 0))
        
        self.status_label = ttk.Label(self.status_frame,
                                    text="‚óè S·∫µn s√†ng",
                                    font=('Segoe UI', 10, 'bold'),
                                    foreground=self.colors['success'])
        self.status_label.pack()
        
    def create_main_content(self):
        """T·∫°o n·ªôi dung ch√≠nh"""
        # Left panel - Menu
        self.create_left_panel()
        
        # Right panel - Content
        self.create_right_panel()
        
    def create_left_panel(self):
        """T·∫°o panel menu b√™n tr√°i"""

        left_frame = ttk.LabelFrame(self.main_frame, text="CH·ª®C NƒÇNG", padding="10")
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        left_frame.configure(width=300)
        left_frame.grid_propagate(False)
        
        # School year section
        year_label = ttk.Label(left_frame, text="Thay ƒë·ªïi nƒÉm h·ªçc:", font=('Segoe UI', 9))
        year_label.pack(anchor='w', pady=(0, 5))
        
        # Frame cho c√°c button nƒÉm h·ªçc
        year_frame = ttk.Frame(left_frame)
        year_frame.pack(fill='x', pady=(0, 10))
        
        self.btn_change_year_2024 = ttk.Button(year_frame,
                                              text="2024-2025",
                                              command=lambda: self.change_school_year(2024),
                                              width=12)
        self.btn_change_year_2024.pack(side='left', fill='x', expand=True, padx=(0, 2))
        
        self.btn_change_year_2025 = ttk.Button(year_frame,
                                              text="2025-2026", 
                                              command=lambda: self.change_school_year(2025),
                                              width=12)
        self.btn_change_year_2025.pack(side='left', fill='x', expand=True, padx=(2, 0))
        
        # Update button states ƒë·ªÉ hi·ªÉn th·ªã active year
        self.update_year_button_states()

        # Separator
        separator1 = ttk.Separator(left_frame, orient='horizontal')
        separator1.pack(fill='x', pady=(0, 15))

        # Workflow section
        workflow_label = ttk.Label(left_frame, text="Export:", style='Heading.TLabel')
        workflow_label.pack(pady=(0, 10), anchor='w')
        
        # Workflow buttons
        self.btn_case1 = ttk.Button(left_frame,
                                   text="To√†n b·ªô d·ªØ li·ªáu",
                                   style='Primary.TButton',
                                   command=self.start_workflow_case1)
        self.btn_case1.pack(fill='x', pady=(0, 5))
        
        self.btn_case2 = ttk.Button(left_frame,
                                   text="Theo d·ªØ li·ªáu file import",
                                   style='Primary.TButton',
                                   command=self.start_workflow_case2)
        self.btn_case2.pack(fill='x', pady=(0, 15))
        
        # Separator
        separator1 = ttk.Separator(left_frame, orient='horizontal')
        separator1.pack(fill='x', pady=(0, 15))
        
        # Individual functions
        functions_label = ttk.Label(left_frame, text="Xu·∫•t d·ªØ li·ªáu:", style='Heading.TLabel')
        functions_label.pack(pady=(0, 10), anchor='w')
        
        # Data retrieval section         
        self.btn_get_teachers = ttk.Button(left_frame,
                                          text="L·∫•y danh s√°ch Gi√°o vi√™n",
                                          command=self.get_teachers_data)
        self.btn_get_teachers.pack(fill='x', pady=(0, 5))
        
        self.btn_get_students = ttk.Button(left_frame,
                                          text="L·∫•y danh s√°ch H·ªçc sinh",
                                          command=self.get_students_data)
        self.btn_get_students.pack(fill='x', pady=(0, 5))
        # self.btn_change_year_2025.pack(side='left', fill='x', expand=True, padx=(2, 0))
        
        # self.btn_convert_excel = ttk.Button(left_frame,
        #                                    text="üìÑ Chuy·ªÉn ƒë·ªïi JSON ‚Üí Excel",
        #                                    command=self.convert_json_to_excel)
        # self.btn_convert_excel.pack(fill='x', pady=(0, 15))
        
        # Separator
        separator2 = ttk.Separator(left_frame, orient='horizontal')
        separator2.pack(fill='x', pady=(0, 15))

        # Delete functions
        delete_label = ttk.Label(left_frame, text="X√≥a d·ªØ li·ªáu:", style='Heading.TLabel')
        delete_label.pack(pady=(0, 10), anchor='w')
        
        # Data retrieval section         
        self.btn_get_teachers = ttk.Button(left_frame,
                                          text="X√≥a to√†n b·ªô Gi√°o vi√™n",
                                          command=self.bulk_delete_teachers)
        self.btn_get_teachers.pack(fill='x', pady=(0, 5))
        
        self.btn_get_students = ttk.Button(left_frame,
                                          text="X√≥a gi√°o vi√™n ch·ªâ ƒë·ªãnh",
                                          command=self.selective_delete_teachers)
        self.btn_get_students.pack(fill='x', pady=(0, 5))

        # Separator
        separator2 = ttk.Separator(left_frame, orient='horizontal')
        separator2.pack(fill='x', pady=(0, 15))
        
        # Settings section
        settings_label = ttk.Label(left_frame, text="C√†i ƒë·∫∑t", style='Heading.TLabel')
        settings_label.pack(pady=(0, 10), anchor='w')
        
        self.btn_config = ttk.Button(left_frame,
                                    text="‚öôÔ∏è C·∫•u h√¨nh",
                                    command=self.open_config)
        self.btn_config.pack(fill='x', pady=(0, 5))
        
        self.btn_about = ttk.Button(left_frame,
                                   text="‚ÑπÔ∏è V·ªÅ ·ª©ng d·ª•ng",
                                   command=self.show_about)
        self.btn_about.pack(fill='x')
        
    def create_right_panel(self):
        """T·∫°o panel n·ªôi dung b√™n ph·∫£i"""
        right_frame = ttk.Frame(self.main_frame)
        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        right_frame.rowconfigure(0, weight=1)
        right_frame.columnconfigure(0, weight=1)
        
        # Notebook cho tabs
        self.notebook = ttk.Notebook(right_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Tab: Google Sheets Viewer
        self.create_sheets_tab()
        
        # Tab: Log Output
        self.create_log_tab()
        
        # Tab: Configuration
        self.create_config_tab()
        
        # Tab: Results
        self.create_results_tab()
        
    def create_sheets_tab(self):
        """T·∫°o tab Google Sheets viewer"""
        sheets_frame = ttk.Frame(self.notebook)
        self.notebook.add(sheets_frame, text="üìä Google Sheets")
        
        # Import v√† kh·ªüi t·∫°o sheets viewer
        try:
            from ui.sheets_viewer import GoogleSheetsViewer
            self.sheets_viewer = GoogleSheetsViewer(sheets_frame)
        except Exception as e:
            # Fallback n·∫øu c√≥ l·ªói
            error_label = ttk.Label(sheets_frame, 
                                   text=f"L·ªói t·∫£i Google Sheets Viewer:\n{str(e)}",
                                   justify='center')
            error_label.pack(expand=True)
        
    def create_log_tab(self):
        """T·∫°o tab log output"""
        log_frame = ttk.Frame(self.notebook)
        self.notebook.add(log_frame, text="üìã Log & Ti·∫øn tr√¨nh")
        
        log_frame.rowconfigure(1, weight=1)
        log_frame.columnconfigure(0, weight=1)
        
        # Progress section
        progress_frame = ttk.LabelFrame(log_frame, text="Ti·∫øn tr√¨nh", padding="10")
        progress_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        # Current task
        self.task_label = ttk.Label(progress_frame, textvariable=self.current_task)
        self.task_label.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # Progress bar
        self.progress_bar = ttk.Progressbar(progress_frame, 
                                          variable=self.progress_var,
                                          maximum=100)
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # Control buttons
        control_frame = ttk.Frame(progress_frame)
        control_frame.grid(row=2, column=0, sticky=(tk.W, tk.E))
        
        self.btn_stop = ttk.Button(control_frame,
                                  text="‚èπÔ∏è D·ª´ng",
                                  state='disabled',
                                  command=self.stop_processing)
        self.btn_stop.pack(side='left', padx=(0, 5))
        
        self.btn_clear_log = ttk.Button(control_frame,
                                       text="üóëÔ∏è X√≥a log",
                                       command=self.clear_log)
        self.btn_clear_log.pack(side='left')
        
        # Log output
        log_output_frame = ttk.LabelFrame(log_frame, text="Log Output", padding="10")
        log_output_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        log_output_frame.rowconfigure(0, weight=1)
        log_output_frame.columnconfigure(0, weight=1)
        
        # Text widget with scrollbar
        text_frame = ttk.Frame(log_output_frame)
        text_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        text_frame.rowconfigure(0, weight=1)
        text_frame.columnconfigure(0, weight=1)
        
        self.log_text_widget = tk.Text(text_frame,
                                      wrap='word',
                                      font=('Consolas', 9),
                                      bg='#1e1e1e',
                                      fg='#ffffff',
                                      insertbackground='#ffffff')
        self.log_text_widget.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(text_frame, orient='vertical', command=self.log_text_widget.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.log_text_widget.configure(yscrollcommand=scrollbar.set)
        
        # Configure text tags for colored output
        self.setup_log_tags()
        
    def create_config_tab(self):
        """T·∫°o tab c·∫•u h√¨nh"""
        config_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_frame, text="‚öôÔ∏è C·∫•u h√¨nh")
        
        config_frame.rowconfigure(0, weight=1)
        config_frame.columnconfigure(0, weight=1)
        
        # Scrollable frame
        canvas = tk.Canvas(config_frame)
        scrollbar_config = ttk.Scrollbar(config_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar_config.set)
        
        canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_config.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # OnLuyen API Configuration
        self.create_onluyen_config(scrollable_frame)
        
        # Google Sheets Configuration  
        self.create_sheets_config(scrollable_frame)
        
        # File Paths Configuration
        self.create_paths_config(scrollable_frame)
        
    def create_results_tab(self):
        """T·∫°o tab k·∫øt qu·∫£"""
        results_frame = ttk.Frame(self.notebook)
        self.notebook.add(results_frame, text="üìä K·∫øt qu·∫£")
        
        results_frame.rowconfigure(1, weight=1)
        results_frame.columnconfigure(0, weight=1)
        
        # Summary section
        summary_frame = ttk.LabelFrame(results_frame, text="T√≥m t·∫Øt", padding="10")
        summary_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.summary_label = ttk.Label(summary_frame, text="Ch∆∞a c√≥ d·ªØ li·ªáu")
        self.summary_label.pack()
        
        # Files section
        files_frame = ttk.LabelFrame(results_frame, text="Files ƒë√£ t·∫°o", padding="10")
        files_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        files_frame.rowconfigure(0, weight=1)
        files_frame.columnconfigure(0, weight=1)
        
        # Treeview for files
        self.files_tree = ttk.Treeview(files_frame, columns=('Type', 'Path', 'Size', 'Date'), show='tree headings')
        self.files_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure columns
        self.files_tree.heading('#0', text='T√™n file')
        self.files_tree.heading('Type', text='Lo·∫°i')
        self.files_tree.heading('Path', text='ƒê∆∞·ªùng d·∫´n')
        self.files_tree.heading('Size', text='K√≠ch th∆∞·ªõc')
        self.files_tree.heading('Date', text='Ng√†y t·∫°o')
        
        # Scrollbar for treeview
        files_scrollbar = ttk.Scrollbar(files_frame, orient='vertical', command=self.files_tree.yview)
        files_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.files_tree.configure(yscrollcommand=files_scrollbar.set)
        
        # Context menu for files
        self.setup_files_context_menu()
        
    def create_status_bar(self):
        """T·∫°o status bar"""
        status_frame = ttk.Frame(self.main_frame)
        status_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        status_frame.columnconfigure(1, weight=1)
        
        # Status icon
        self.status_icon = ttk.Label(status_frame, text="‚óè", foreground=self.colors['success'])
        self.status_icon.grid(row=0, column=0, padx=(0, 5))
        
        # Status text
        self.status_text = ttk.Label(status_frame, text="S·∫µn s√†ng")
        self.status_text.grid(row=0, column=1, sticky=(tk.W))
        
        # Version info
        version_label = ttk.Label(status_frame, text="v1.0.0", font=('Segoe UI', 8))
        version_label.grid(row=0, column=2)
        
    def setup_log_tags(self):
        """Thi·∫øt l·∫≠p tags cho colored log output"""
        # Success messages
        self.log_text_widget.tag_configure("success", foreground="#4CAF50")
        
        # Error messages
        self.log_text_widget.tag_configure("error", foreground="#F44336")
        
        # Warning messages
        self.log_text_widget.tag_configure("warning", foreground="#FF9800")
        
        # Info messages
        self.log_text_widget.tag_configure("info", foreground="#2196F3")
        
        # Headers/separators
        self.log_text_widget.tag_configure("header", foreground="#9C27B0", font=('Consolas', 9, 'bold'))
        
    def create_onluyen_config(self, parent):
        """T·∫°o section c·∫•u h√¨nh OnLuyen API"""
        onluyen_frame = ttk.LabelFrame(parent, text="OnLuyen API", padding="10")
        onluyen_frame.pack(fill='x', pady=(0, 10))
        
        # Base URL
        ttk.Label(onluyen_frame, text="Base URL:").grid(row=0, column=0, sticky='w', pady=(0, 5))
        self.onluyen_url_var = tk.StringVar(value=self.config.get_onluyen_config().get('base_url', ''))
        url_entry = ttk.Entry(onluyen_frame, textvariable=self.onluyen_url_var, width=50)
        url_entry.grid(row=0, column=1, sticky='ew', pady=(0, 5), padx=(10, 0))
        
        # Default credentials (readonly)
        ttk.Label(onluyen_frame, text="Username:").grid(row=1, column=0, sticky='w', pady=(0, 5))
        self.onluyen_username_var = tk.StringVar(value=self.config.get_onluyen_config().get('username', ''))
        username_entry = ttk.Entry(onluyen_frame, textvariable=self.onluyen_username_var, width=50)
        username_entry.grid(row=1, column=1, sticky='ew', pady=(0, 5), padx=(10, 0))
        
        # Test connection button
        ttk.Button(onluyen_frame, text="Test Connection", command=self.test_onluyen_connection).grid(row=2, column=1, sticky='w', pady=(10, 0), padx=(10, 0))
        
        onluyen_frame.columnconfigure(1, weight=1)
        
    def create_sheets_config(self, parent):
        """T·∫°o section c·∫•u h√¨nh Google Sheets"""
        sheets_frame = ttk.LabelFrame(parent, text="Google Sheets", padding="10")
        sheets_frame.pack(fill='x', pady=(0, 10))
        
        # Spreadsheet ID
        ttk.Label(sheets_frame, text="Spreadsheet ID:").grid(row=0, column=0, sticky='w', pady=(0, 5))
        self.sheets_id_var = tk.StringVar(value=self.config.get_google_config().get('test_sheet_id', ''))
        id_entry = ttk.Entry(sheets_frame, textvariable=self.sheets_id_var, width=50)
        id_entry.grid(row=0, column=1, sticky='ew', pady=(0, 5), padx=(10, 0))
        
        # Sheet Name
        ttk.Label(sheets_frame, text="Sheet Name:").grid(row=1, column=0, sticky='w', pady=(0, 5))
        self.sheet_name_var = tk.StringVar(value=self.config.get_google_config().get('sheet_name', ''))
        name_entry = ttk.Entry(sheets_frame, textvariable=self.sheet_name_var, width=50)
        name_entry.grid(row=1, column=1, sticky='ew', pady=(0, 5), padx=(10, 0))
        
        # Test connection button
        ttk.Button(sheets_frame, text="Test Connection", command=self.test_sheets_connection).grid(row=2, column=1, sticky='w', pady=(10, 0), padx=(10, 0))
        
        sheets_frame.columnconfigure(1, weight=1)
        
    def create_paths_config(self, parent):
        """T·∫°o section c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n"""
        paths_frame = ttk.LabelFrame(parent, text="ƒê∆∞·ªùng d·∫´n", padding="10")
        paths_frame.pack(fill='x', pady=(0, 10))
        
        paths_config = self.config.get_paths_config()
        
        # Input directory
        ttk.Label(paths_frame, text="Th∆∞ m·ª•c Input:").grid(row=0, column=0, sticky='w', pady=(0, 5))
        self.input_dir_var = tk.StringVar(value=paths_config.get('input_dir', ''))
        input_entry = ttk.Entry(paths_frame, textvariable=self.input_dir_var, width=40)
        input_entry.grid(row=0, column=1, sticky='ew', pady=(0, 5), padx=(10, 5))
        ttk.Button(paths_frame, text="...", command=lambda: self.browse_directory(self.input_dir_var)).grid(row=0, column=2, pady=(0, 5))
        
        # Output directory
        ttk.Label(paths_frame, text="Th∆∞ m·ª•c Output:").grid(row=1, column=0, sticky='w', pady=(0, 5))
        self.output_dir_var = tk.StringVar(value=paths_config.get('output_dir', ''))
        output_entry = ttk.Entry(paths_frame, textvariable=self.output_dir_var, width=40)
        output_entry.grid(row=1, column=1, sticky='ew', pady=(0, 5), padx=(10, 5))
        ttk.Button(paths_frame, text="...", command=lambda: self.browse_directory(self.output_dir_var)).grid(row=1, column=2, pady=(0, 5))
        
        paths_frame.columnconfigure(1, weight=1)
        
    def setup_files_context_menu(self):
        """Thi·∫øt l·∫≠p context menu cho files tree"""
        self.files_context_menu = tk.Menu(self.root, tearoff=0)
        self.files_context_menu.add_command(label="M·ªü file", command=self.open_selected_file)
        self.files_context_menu.add_command(label="M·ªü th∆∞ m·ª•c ch·ª©a", command=self.open_file_location)
        self.files_context_menu.add_separator()
        self.files_context_menu.add_command(label="Sao ch√©p ƒë∆∞·ªùng d·∫´n", command=self.copy_file_path)
        
        self.files_tree.bind("<Button-3>", self.show_files_context_menu)
        
    def setup_bindings(self):
        """Thi·∫øt l·∫≠p keyboard bindings"""
        self.root.bind('<Control-q>', lambda e: self.root.quit())
        self.root.bind('<F5>', lambda e: self.refresh_ui())
        
    def log_message(self, message, level="info"):
        """Th√™m message v√†o log v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        full_message = f"[{timestamp}] {message}\n"
        
        self.log_text_widget.insert(tk.END, full_message, level)
        self.log_text_widget.see(tk.END)
        
        # Update status
        if level == "error":
            self.update_status("L·ªói", "error")
        elif level == "success":
            self.update_status("Th√†nh c√¥ng", "success")
        elif level == "warning":
            self.update_status("C·∫£nh b√°o", "warning")
        else:
            self.update_status("ƒêang x·ª≠ l√Ω...", "info")
            
    def log_message_safe(self, message, level="info"):
        """Thread-safe version c·ªßa log_message"""
        self.root.after(0, lambda: self.log_message(message, level))
        
    def update_progress_safe(self, value, status=""):
        """Thread-safe version c·ªßa update_progress"""
        self.root.after(0, lambda: self.update_progress(value, status))
        
    def update_button_state_safe(self, button, state):
        """Thread-safe version ƒë·ªÉ c·∫≠p nh·∫≠t button state"""
        self.root.after(0, lambda: button.config(state=state))
            
    def update_status(self, message, level="info"):
        """C·∫≠p nh·∫≠t status bar"""
        color_map = {
            "success": self.colors['success'],
            "error": self.colors['error'],
            "warning": self.colors['warning'],
            "info": self.colors['primary']
        }
        
        self.status_text.config(text=message)
        self.status_icon.config(foreground=color_map.get(level, self.colors['primary']))
        
    def update_progress(self, value, task=""):
        """C·∫≠p nh·∫≠t progress bar"""
        self.progress_var.set(value)
        if task:
            self.current_task.set(task)
            
    def clear_log(self):
        """X√≥a log output"""
        self.log_text_widget.delete(1.0, tk.END)
        
    def start_workflow_case1(self):
        """B·∫Øt ƒë·∫ßu workflow Case 1"""
        if self.is_processing:
            messagebox.showwarning("C·∫£nh b√°o", "H·ªá th·ªëng ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i.")
            return
            
        # Ki·ªÉm tra xem c√≥ sheets_viewer v√† c√≥ row ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not hasattr(self, 'sheets_viewer'):
            messagebox.showerror("L·ªói", "Google Sheets viewer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return
            
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Vui l√≤ng ch·ªçn m·ªôt row (tr∆∞·ªùng h·ªçc) trong Google Sheets ƒë·ªÉ x·ª≠ l√Ω.\n\n" +
                                 "Click v√†o s·ªë th·ª© t·ª± h√†ng b√™n tr√°i ƒë·ªÉ ch·ªçn row.")
            return

        # Hi·ªÉn th·ªã th√¥ng tin row ƒë∆∞·ª£c ch·ªçn
        row_info = self.sheets_viewer.get_selected_row_info()
        self.log_message(f"B·∫Øt ƒë·∫ßu Workflow Case 1: To√†n b·ªô d·ªØ li·ªáu", "header")
        self.log_message(f"üìã X·ª≠ l√Ω tr∆∞·ªùng: {row_info}", "info")
        
        # Run in thread to prevent UI blocking
        thread = threading.Thread(target=self._execute_workflow_case1, args=(selected_row_data,))
        thread.daemon = True
        thread.start()
        
    def start_workflow_case2(self):
        """B·∫Øt ƒë·∫ßu workflow Case 2"""
        if self.is_processing:
            messagebox.showwarning("C·∫£nh b√°o", "H·ªá th·ªëng ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i.")
            return
            
        # Ki·ªÉm tra xem c√≥ sheets_viewer v√† c√≥ row ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not hasattr(self, 'sheets_viewer'):
            messagebox.showerror("L·ªói", "Google Sheets viewer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return
            
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Vui l√≤ng ch·ªçn m·ªôt row (tr∆∞·ªùng h·ªçc) trong Google Sheets ƒë·ªÉ x·ª≠ l√Ω.\n\n" +
                                 "Click v√†o s·ªë th·ª© t·ª± h√†ng b√™n tr√°i ƒë·ªÉ ch·ªçn row.")
            return
            
        # Hi·ªÉn th·ªã th√¥ng tin row ƒë∆∞·ª£c ch·ªçn
        row_info = self.sheets_viewer.get_selected_row_info()
        self.log_message(f"B·∫Øt ƒë·∫ßu Workflow Case 2: D·ªØ li·ªáu theo file import", "header")
        self.log_message(f"üìã X·ª≠ l√Ω tr∆∞·ªùng: {row_info}", "info")
        
        # Run in thread to prevent UI blocking
        thread = threading.Thread(target=self._execute_workflow_case2, args=(selected_row_data,))
        thread.daemon = True
        thread.start()
        
    def _execute_workflow_case1(self, selected_school_data):
        """Execute workflow case 1 trong thread"""
        try:
            self.is_processing = True
            self.update_button_state_safe(self.btn_stop, 'normal')
            
            self.log_message_safe("ƒêang th·ª±c hi·ªán workflow case 1...", "info")
            self.update_progress_safe(10, "Kh·ªüi t·∫°o...")
            
            # Import and execute workflow
            console_app = SchoolProcessApp()
            
            self.update_progress_safe(20, "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
            
            # Execute actual workflow v·ªõi selected school data
            workflow_results = console_app._execute_workflow_case_1(selected_school_data, ui_mode=True)
            
            self.update_progress_safe(90, "X·ª≠ l√Ω ho√†n th√†nh")
            self.log_message_safe("Workflow Case 1 ho√†n th√†nh!", "success")
            
            # Hi·ªÉn th·ªã dialog xem file export n·∫øu c√≥ k·∫øt qu·∫£
            if workflow_results and workflow_results.get('excel_file_path'):
                self.update_progress_safe(100, "Hi·ªÉn th·ªã k·∫øt qu·∫£")
                
                export_results = {
                    'json_file_path': workflow_results.get('json_file_path', ''),
                    'excel_file_path': workflow_results.get('excel_file_path', ''),
                    'school_name': workflow_results.get('school_info', {}).get('name', 'N/A'),
                    'drive_link': workflow_results.get('school_info', {}).get('drive_link', '')
                }
                
                # Hi·ªÉn th·ªã dialog trong main thread
                self.root.after(0, lambda: self.show_export_dialog(export_results))
            else:
                self.update_progress_safe(100, "Ho√†n th√†nh")
            
        except Exception as e:
            self.log_message_safe(f"L·ªói trong workflow Case 1: {str(e)}", "error")
            traceback.print_exc()
        finally:
            self.is_processing = False
            self.update_button_state_safe(self.btn_stop, 'disabled')
            
    def _execute_workflow_case2(self, selected_school_data):
        """Execute workflow case 2 trong thread"""
        try:
            self.is_processing = True
            self.update_button_state_safe(self.btn_stop, 'normal')
            
            self.log_message_safe("ƒêang th·ª±c hi·ªán workflow case 2...", "info")
            self.update_progress_safe(10, "Kh·ªüi t·∫°o...")
            
            # Import and execute workflow
            console_app = SchoolProcessApp()
            
            self.update_progress_safe(20, "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
            
            # Execute actual workflow v·ªõi selected school data
            workflow_results = console_app._execute_workflow_case_2(selected_school_data, ui_mode=True)
            
            self.update_progress_safe(90, "X·ª≠ l√Ω ho√†n th√†nh")
            self.log_message_safe("Workflow Case 2 ho√†n th√†nh!", "success")
            
            # Hi·ªÉn th·ªã dialog xem file export n·∫øu c√≥ k·∫øt qu·∫£
            if workflow_results and workflow_results.get('excel_file_path'):
                self.update_progress_safe(100, "Hi·ªÉn th·ªã k·∫øt qu·∫£")
                
                export_results = {
                    'json_file_path': workflow_results.get('json_file_path', ''),
                    'excel_file_path': workflow_results.get('excel_file_path', ''),
                    'school_name': workflow_results.get('school_info', {}).get('name', 'N/A'),
                    'drive_link': workflow_results.get('school_info', {}).get('drive_link', '')
                }
                
                # Hi·ªÉn th·ªã dialog trong main thread
                self.root.after(0, lambda: self.show_export_dialog(export_results))
            else:
                self.update_progress_safe(100, "Ho√†n th√†nh")
            
        except Exception as e:
            self.log_message_safe(f"L·ªói trong workflow Case 2: {str(e)}", "error")
            traceback.print_exc()
        finally:
            self.is_processing = False
            self.update_button_state_safe(self.btn_stop, 'disabled')
            
    def show_export_dialog(self, export_results):
        """Hi·ªÉn th·ªã dialog xem file export"""
        try:
            dialog = ExportViewDialog(self, export_results)
            result = dialog.show()
            
            if result == 'view':
                self.log_message("ƒê√£ m·ªü file export ƒë·ªÉ xem", "info")
            elif result == 'upload':
                self.log_message("B·∫Øt ƒë·∫ßu ƒë·∫©y files l√™n Google Drive...", "info")
            else:
                self.log_message("ƒê√£ ƒë√≥ng dialog export", "info")
                
        except Exception as e:
            self.log_message(f"L·ªói hi·ªÉn th·ªã dialog export: {str(e)}", "error")
            traceback.print_exc()
            
    def get_teachers_data(self):
        """L·∫•y d·ªØ li·ªáu gi√°o vi√™n"""
        if self.is_processing:
            messagebox.showwarning("C·∫£nh b√°o", "H·ªá th·ªëng ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i.")
            return
        
        # Ki·ªÉm tra xem c√≥ sheets_viewer v√† c√≥ row ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not hasattr(self, 'sheets_viewer'):
            messagebox.showerror("L·ªói", "Google Sheets viewer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return
            
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Vui l√≤ng ch·ªçn m·ªôt row (tr∆∞·ªùng h·ªçc) trong Google Sheets tr∆∞·ªõc khi l·∫•y d·ªØ li·ªáu.\n\n" +
                                 "Click v√†o s·ªë th·ª© t·ª± h√†ng b√™n tr√°i ƒë·ªÉ ch·ªçn row.")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin row ƒë∆∞·ª£c ch·ªçn
        row_info = self.sheets_viewer.get_selected_row_info()
        self.log_message(f"üìã L·∫•y d·ªØ li·ªáu gi√°o vi√™n t·ª´ tr∆∞·ªùng: {row_info}", "info")
            
        self.log_message("B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu gi√°o vi√™n...", "info")
        
        thread = threading.Thread(target=self._get_teachers_data_thread, args=(selected_row_data,))
        thread.daemon = True
        thread.start()
        
    def _get_teachers_data_thread(self, selected_school_data):
        """L·∫•y d·ªØ li·ªáu gi√°o vi√™n trong thread v·ªõi logic year-aware v√† export Excel"""
        try:
            self.is_processing = True
            self.update_progress_safe(10, "ƒêang k·∫øt n·ªëi OnLuyen API...")
            
            # Import app ƒë·ªÉ s·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± workflow
            from app import SchoolProcessApp
            app = SchoolProcessApp()
            
            # L·∫•y th√¥ng tin tr∆∞·ªùng
            school_name = selected_school_data.get('T√™n tr∆∞·ªùng', 'N/A')
            admin_email = selected_school_data.get('Admin', '').strip()
            password = selected_school_data.get('M·∫≠t kh·∫©u', '').strip()
            
            if not admin_email or not password:
                self.log_message_safe(f"‚ùå Thi·∫øu th√¥ng tin Admin email ho·∫∑c M·∫≠t kh·∫©u", "error")
                return
            
            self.update_progress_safe(20, "ƒêang x√°c th·ª±c token...")
            self.log_message_safe(f"üéØ S·ª≠ d·ª•ng nƒÉm h·ªçc: {self.current_school_year}", "info")
            
            # S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± workflow ƒë·ªÉ ƒë·∫£m b·∫£o token ƒë√∫ng nƒÉm
            has_data, login_file_path, token_valid = app._check_existing_school_login_data(admin_email, self.current_school_year)
            
            auth_success = False
            client = None
            
            if has_data and token_valid:
                self.log_message_safe(f"‚úÖ T√¨m th·∫•y d·ªØ li·ªáu JSON h·ª£p l·ªá cho tr∆∞·ªùng {school_name}", "info")
                
                from config.onluyen_api import OnLuyenAPIClient
                client = OnLuyenAPIClient()
                if client.load_token_from_login_file(admin_email, self.current_school_year):
                    self.log_message_safe(f"‚úÖ ƒê√£ load token t·ª´ file cho nƒÉm {self.current_school_year}", "info")
                    
                    # Test token v√† ki·ªÉm tra nƒÉm h·ªçc
                    test_result = client.get_teachers(page_size=1)
                    if test_result['success']:
                        token_info = client.get_current_school_year_info()
                        if token_info.get('success') and token_info.get('school_year'):
                            actual_year = token_info.get('school_year')
                            if actual_year == self.current_school_year:
                                auth_success = True
                                self.log_message_safe(f"‚úÖ Token h·ª£p l·ªá cho nƒÉm {actual_year}", "success")
                            else:
                                self.log_message_safe(f"‚ö†Ô∏è Token hi·ªán c√≥ cho nƒÉm {actual_year}, c·∫ßn token cho nƒÉm {self.current_school_year}", "warning")
                                has_data = False
                        else:
                            self.log_message_safe("‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh nƒÉm h·ªçc t·ª´ token, c·∫ßn login l·∫°i", "warning")
                            has_data = False
                    else:
                        self.log_message_safe("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n, c·∫ßn login l·∫°i", "warning")
                        has_data = False
                else:
                    self.log_message_safe("‚ö†Ô∏è Kh√¥ng th·ªÉ load token t·ª´ file, c·∫ßn login l·∫°i", "warning")
                    has_data = False
            
            if not has_data or not token_valid or not auth_success:
                self.update_progress_safe(30, "ƒêang th·ª±c hi·ªán login...")
                self.log_message_safe(f"üîê Th·ª±c hi·ªán login m·ªõi cho nƒÉm {self.current_school_year}...", "info")
                
                client, auth_success, login_result = app._get_authenticated_client(admin_email, password, self.current_school_year, ui_mode=True)
                
                if not auth_success:
                    self.log_message_safe(f"‚ùå X√°c th·ª±c th·∫•t b·∫°i: {login_result.get('error', 'Unknown error')}", "error")
                    return
                
                # L∆∞u th√¥ng tin login m·ªõi
                if login_result.get('data', {}).get('source') != 'login_file':
                    self.log_message_safe("üíæ L∆∞u th√¥ng tin login m·ªõi...", "info")
                    app._save_successful_login_info(school_name, admin_email, login_result, '', password, self.current_school_year)
                    self.log_message_safe(f"‚úÖ ƒê√£ t·∫°o/c·∫≠p nh·∫≠t d·ªØ li·ªáu JSON cho tr∆∞·ªùng {school_name}", "success")
            
            self.update_progress_safe(50, "ƒêang l·∫•y d·ªØ li·ªáu gi√°o vi√™n...")
            self.log_message_safe(f"üìã ƒêang l·∫•y danh s√°ch gi√°o vi√™n cho nƒÉm {self.current_school_year}...", "info")
            
            # L·∫•y d·ªØ li·ªáu gi√°o vi√™n
            result = client.get_teachers(page_size=1000)
            
            if result['success']:
                self.update_progress_safe(70, "ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
                data = result.get('data', {})
                
                if isinstance(data, dict) and 'data' in data:
                    teachers_list = data['data']
                    teachers_count = data.get('totalCount', len(teachers_list))
                else:
                    teachers_list = data if isinstance(data, list) else []
                    teachers_count = len(teachers_list)
                
                self.log_message_safe(f"‚úÖ L·∫•y th√†nh c√¥ng {len(teachers_list)}/{teachers_count} gi√°o vi√™n", "success")
                
                if teachers_list:
                    self.update_progress_safe(80, "ƒêang t·∫°o file Excel...")
                    
                    # T·∫°o file Excel t·ª´ d·ªØ li·ªáu s·ª≠ d·ª•ng helper function
                    from .ui_helpers import export_teachers_to_excel
                    excel_file_path = export_teachers_to_excel(
                        teachers_list, school_name, self.current_school_year, 
                        log_callback=self.log_message_safe
                    )
                    
                    if excel_file_path:
                        self.update_progress_safe(100, "Ho√†n th√†nh")
                        self.log_message_safe(f"‚úÖ ƒê√£ t·∫°o file Excel: {excel_file_path}", "success")
                        
                        # H·ªèi c√≥ mu·ªën m·ªü file kh√¥ng
                        from .ui_helpers import show_file_completion_dialog
                        self.root.after(0, lambda: show_file_completion_dialog(
                            excel_file_path, "Danh s√°ch Gi√°o vi√™n", self.log_message_safe
                        ))
                    else:
                        self.log_message_safe("‚ùå L·ªói t·∫°o file Excel", "error")
                else:
                    self.update_progress_safe(100, "Ho√†n th√†nh")
                    self.log_message_safe("‚ö†Ô∏è Kh√¥ng c√≥ gi√°o vi√™n n√†o trong danh s√°ch", "warning")
            else:
                error_msg = result.get('error', 'Unknown error')
                self.log_message_safe(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu gi√°o vi√™n: {error_msg}", "error")
                
        except Exception as e:
            self.log_message_safe(f"‚ùå L·ªói: {str(e)}", "error")
            import traceback
            traceback.print_exc()
        finally:
            self.is_processing = False
            
    def get_students_data(self):
        """L·∫•y d·ªØ li·ªáu h·ªçc sinh"""
        if self.is_processing:
            messagebox.showwarning("C·∫£nh b√°o", "H·ªá th·ªëng ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i.")
            return
        
        # Ki·ªÉm tra xem c√≥ sheets_viewer v√† c√≥ row ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not hasattr(self, 'sheets_viewer'):
            messagebox.showerror("L·ªói", "Google Sheets viewer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return
            
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Vui l√≤ng ch·ªçn m·ªôt row (tr∆∞·ªùng h·ªçc) trong Google Sheets tr∆∞·ªõc khi l·∫•y d·ªØ li·ªáu.\n\n" +
                                 "Click v√†o s·ªë th·ª© t·ª± h√†ng b√™n tr√°i ƒë·ªÉ ch·ªçn row.")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin row ƒë∆∞·ª£c ch·ªçn
        row_info = self.sheets_viewer.get_selected_row_info()
        self.log_message(f"üìã L·∫•y d·ªØ li·ªáu h·ªçc sinh t·ª´ tr∆∞·ªùng: {row_info}", "info")
            
        self.log_message("B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu h·ªçc sinh...", "info")
        
        thread = threading.Thread(target=self._get_students_data_thread, args=(selected_row_data,))
        thread.daemon = True
        thread.start()
        
    def _get_students_data_thread(self, selected_school_data):
        """L·∫•y d·ªØ li·ªáu h·ªçc sinh trong thread v·ªõi logic year-aware v√† export Excel"""
        try:
            self.is_processing = True
            self.update_progress_safe(10, "ƒêang k·∫øt n·ªëi OnLuyen API...")
            
            # Import app ƒë·ªÉ s·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± workflow
            from app import SchoolProcessApp
            app = SchoolProcessApp()
            
            # L·∫•y th√¥ng tin tr∆∞·ªùng
            school_name = selected_school_data.get('T√™n tr∆∞·ªùng', 'N/A')
            admin_email = selected_school_data.get('Admin', '').strip()
            password = selected_school_data.get('M·∫≠t kh·∫©u', '').strip()
            
            if not admin_email or not password:
                self.log_message_safe(f"‚ùå Thi·∫øu th√¥ng tin Admin email ho·∫∑c M·∫≠t kh·∫©u", "error")
                return
            
            self.update_progress_safe(20, "ƒêang x√°c th·ª±c token...")
            self.log_message_safe(f"üéØ S·ª≠ d·ª•ng nƒÉm h·ªçc: {self.current_school_year}", "info")
            
            # S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± workflow ƒë·ªÉ ƒë·∫£m b·∫£o token ƒë√∫ng nƒÉm
            has_data, login_file_path, token_valid = app._check_existing_school_login_data(admin_email, self.current_school_year)
            
            auth_success = False
            client = None
            
            if has_data and token_valid:
                self.log_message_safe(f"‚úÖ T√¨m th·∫•y d·ªØ li·ªáu JSON h·ª£p l·ªá cho tr∆∞·ªùng {school_name}", "info")
                
                from config.onluyen_api import OnLuyenAPIClient
                client = OnLuyenAPIClient()
                if client.load_token_from_login_file(admin_email, self.current_school_year):
                    self.log_message_safe(f"‚úÖ ƒê√£ load token t·ª´ file cho nƒÉm {self.current_school_year}", "info")
                    
                    # Test token v√† ki·ªÉm tra nƒÉm h·ªçc
                    test_result = client.get_students(page_index=1, page_size=1)
                    if test_result['success']:
                        token_info = client.get_current_school_year_info()
                        if token_info.get('success') and token_info.get('school_year'):
                            actual_year = token_info.get('school_year')
                            if actual_year == self.current_school_year:
                                auth_success = True
                                self.log_message_safe(f"‚úÖ Token h·ª£p l·ªá cho nƒÉm {actual_year}", "success")
                            else:
                                self.log_message_safe(f"‚ö†Ô∏è Token hi·ªán c√≥ cho nƒÉm {actual_year}, c·∫ßn token cho nƒÉm {self.current_school_year}", "warning")
                                has_data = False
                        else:
                            self.log_message_safe("‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh nƒÉm h·ªçc t·ª´ token, c·∫ßn login l·∫°i", "warning")
                            has_data = False
                    else:
                        self.log_message_safe("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n, c·∫ßn login l·∫°i", "warning")
                        has_data = False
                else:
                    self.log_message_safe("‚ö†Ô∏è Kh√¥ng th·ªÉ load token t·ª´ file, c·∫ßn login l·∫°i", "warning")
                    has_data = False
            
            if not has_data or not token_valid or not auth_success:
                self.update_progress_safe(30, "ƒêang th·ª±c hi·ªán login...")
                self.log_message_safe(f"üîê Th·ª±c hi·ªán login m·ªõi cho nƒÉm {self.current_school_year}...", "info")
                
                client, auth_success, login_result = app._get_authenticated_client(admin_email, password, self.current_school_year, ui_mode=True)
                
                if not auth_success:
                    self.log_message_safe(f"‚ùå X√°c th·ª±c th·∫•t b·∫°i: {login_result.get('error', 'Unknown error')}", "error")
                    return
                
                # L∆∞u th√¥ng tin login m·ªõi
                if login_result.get('data', {}).get('source') != 'login_file':
                    self.log_message_safe("üíæ L∆∞u th√¥ng tin login m·ªõi...", "info")
                    app._save_successful_login_info(school_name, admin_email, login_result, '', password, self.current_school_year)
                    self.log_message_safe(f"‚úÖ ƒê√£ t·∫°o/c·∫≠p nh·∫≠t d·ªØ li·ªáu JSON cho tr∆∞·ªùng {school_name}", "success")
            
            self.update_progress_safe(50, "ƒêang l·∫•y d·ªØ li·ªáu h·ªçc sinh...")
            self.log_message_safe(f"üìã ƒêang l·∫•y danh s√°ch h·ªçc sinh cho nƒÉm {self.current_school_year}...", "info")
            
            # L·∫•y d·ªØ li·ªáu h·ªçc sinh (c√≥ th·ªÉ c·∫ßn nhi·ªÅu l·∫ßn g·ªçi API)
            all_students_list = []
            page_index = 1
            page_size = 1000
            total_students = 0
            
            while True:
                result = client.get_students(page_index=page_index, page_size=page_size)
                
                if not result['success']:
                    if page_index == 1:
                        # L·ªói ngay t·ª´ l·∫ßn ƒë·∫ßu
                        error_msg = result.get('error', 'Unknown error')
                        self.log_message_safe(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu h·ªçc sinh: {error_msg}", "error")
                        return
                    else:
                        # ƒê√£ l·∫•y ƒë∆∞·ª£c m·ªôt ph·∫ßn, d·ª´ng l·∫°i
                        break
                
                data = result.get('data', {})
                if isinstance(data, dict) and 'data' in data:
                    students_batch = data['data']
                    if page_index == 1:
                        total_students = data.get('totalCount', len(students_batch))
                        self.log_message_safe(f"üìä T·ªïng s·ªë h·ªçc sinh: {total_students}", "info")
                    
                    all_students_list.extend(students_batch)
                    self.log_message_safe(f"   ‚úÖ L·∫•y ƒë∆∞·ª£c batch {page_index}: {len(students_batch)} h·ªçc sinh", "info")
                    
                    # Update progress
                    progress = 50 + (len(all_students_list) / max(total_students, 1)) * 20
                    self.update_progress_safe(min(progress, 70), f"ƒê√£ l·∫•y {len(all_students_list)}/{total_students} h·ªçc sinh...")
                    
                    # Ki·ªÉm tra xem c√≤n d·ªØ li·ªáu kh√¥ng
                    if len(students_batch) < page_size or len(all_students_list) >= total_students:
                        break
                        
                    page_index += 1
                else:
                    # Format d·ªØ li·ªáu kh√¥ng ƒë√∫ng
                    if page_index == 1:
                        students_list = data if isinstance(data, list) else []
                        all_students_list.extend(students_list)
                    break
            
            if all_students_list:
                self.update_progress_safe(80, "ƒêang t·∫°o file Excel...")
                self.log_message_safe(f"‚úÖ L·∫•y th√†nh c√¥ng {len(all_students_list)} h·ªçc sinh", "success")
                
                # T·∫°o file Excel t·ª´ d·ªØ li·ªáu s·ª≠ d·ª•ng helper function
                from .ui_helpers import export_students_to_excel
                excel_file_path = export_students_to_excel(
                    all_students_list, school_name, self.current_school_year,
                    log_callback=self.log_message_safe
                )
                
                if excel_file_path:
                    self.update_progress_safe(100, "Ho√†n th√†nh")
                    self.log_message_safe(f"‚úÖ ƒê√£ t·∫°o file Excel: {excel_file_path}", "success")
                    
                    # H·ªèi c√≥ mu·ªën m·ªü file kh√¥ng
                    from .ui_helpers import show_file_completion_dialog
                    self.root.after(0, lambda: show_file_completion_dialog(
                        excel_file_path, "Danh s√°ch H·ªçc sinh", self.log_message_safe
                    ))
                else:
                    self.log_message_safe("‚ùå L·ªói t·∫°o file Excel", "error")
            else:
                self.update_progress_safe(100, "Ho√†n th√†nh")
                self.log_message_safe("‚ö†Ô∏è Kh√¥ng c√≥ h·ªçc sinh n√†o trong danh s√°ch", "warning")
                
        except Exception as e:
            self.log_message_safe(f"‚ùå L·ªói: {str(e)}", "error")
            import traceback
            traceback.print_exc()
        finally:
            self.is_processing = False
            
    def _log_current_school_year_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin nƒÉm h·ªçc hi·ªán t·∫°i t·ª´ access token"""
        try:
            from pathlib import Path
            
            # T√¨m file login g·∫ßn nh·∫•t
            pattern = "data/output/onluyen_login_*.json"
            files = glob.glob(pattern)
            
            if not files:
                return
            
            # L·∫•y file m·ªõi nh·∫•t
            latest_file = max(files, key=lambda f: Path(f).stat().st_mtime)
            
            with open(latest_file, 'r', encoding='utf-8') as f:
                login_data = json.load(f)
            
            access_token = login_data.get('tokens', {}).get('access_token')
            if access_token:
                # Decode JWT token manually (ch·ªâ l·∫•y payload, kh√¥ng verify)
                parts = access_token.split('.')
                if len(parts) >= 2:
                    # Decode payload (part 1)
                    payload = parts[1]
                    # Th√™m padding n·∫øu c·∫ßn
                    padding = len(payload) % 4
                    if padding:
                        payload += '=' * (4 - padding)
                    
                    decoded_bytes = base64.b64decode(payload)
                    decoded = json.loads(decoded_bytes.decode('utf-8'))
                    
                    school_year = decoded.get('SchoolYear')
                    display_name = decoded.get('DisplayName', '')
                    
                    if school_year:
                        self.log_message(f"üìÖ NƒÉm h·ªçc hi·ªán t·∫°i: {school_year}", "info")
                    if display_name:
                        self.log_message(f"üë§ T√†i kho·∫£n: {display_name}", "info")
                    
        except Exception as e:
            # Kh√¥ng log l·ªói n√†y v√¨ kh√¥ng quan tr·ªçng
            pass
    
    def _show_initial_school_year_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin nƒÉm h·ªçc khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
        try:
            from pathlib import Path
            
            # T√¨m file login g·∫ßn nh·∫•t
            pattern = "data/output/onluyen_login_*.json"
            files = glob.glob(pattern)
            
            if files:
                # L·∫•y file m·ªõi nh·∫•t
                latest_file = max(files, key=lambda f: Path(f).stat().st_mtime)
                
                with open(latest_file, 'r', encoding='utf-8') as f:
                    login_data = json.load(f)
                
                tokens = login_data.get('tokens', {})
                if tokens.get('access_token'):
                    self.log_message("üîë T√¨m th·∫•y access token t·ª´ phi√™n ƒëƒÉng nh·∫≠p tr∆∞·ªõc", "info")
                    
                    # Ph√°t hi·ªán nƒÉm h·ªçc t·ª´ token
                    detected_year = self._detect_school_year_from_token(tokens.get('access_token'))
                    if detected_year:
                        self.current_school_year = detected_year
                        self.update_year_button_states()
                    
                    self._log_current_school_year_info()
                else:
                    self.log_message("‚ÑπÔ∏è Ch∆∞a c√≥ access token. Vui l√≤ng login ho·∫∑c th·ª±c hi·ªán workflow ƒë·ªÉ l·∫•y d·ªØ li·ªáu.", "info")
                    self.log_message(f"üìÖ NƒÉm h·ªçc m·∫∑c ƒë·ªãnh: {self.current_school_year}", "info")
            else:
                self.log_message("‚ÑπÔ∏è Ch∆∞a c√≥ phi√™n ƒëƒÉng nh·∫≠p n√†o. Vui l√≤ng th·ª±c hi·ªán workflow ƒë·ªÉ b·∫Øt ƒë·∫ßu.", "info")
                self.log_message(f"üìÖ NƒÉm h·ªçc m·∫∑c ƒë·ªãnh: {self.current_school_year}", "info")
                
        except Exception as e:
            # Kh√¥ng log l·ªói n√†y
            pass
    
    def _detect_school_year_from_token(self, access_token):
        """Ph√°t hi·ªán nƒÉm h·ªçc t·ª´ access token"""
        try:
            # Decode JWT token manually (ch·ªâ l·∫•y payload, kh√¥ng verify)
            parts = access_token.split('.')
            if len(parts) >= 2:
                # Decode payload (part 1)
                payload = parts[1]
                # Th√™m padding n·∫øu c·∫ßn
                padding = len(payload) % 4
                if padding:
                    payload += '=' * (4 - padding)
                
                decoded_bytes = base64.b64decode(payload)
                decoded = json.loads(decoded_bytes.decode('utf-8'))
                
                school_year = decoded.get('SchoolYear')
                if school_year:
                    # Extract year from format like "2024-2025" -> 2024
                    if '-' in str(school_year):
                        return int(str(school_year).split('-')[0])
                    else:
                        return int(school_year)
                        
        except Exception as e:
            pass
        return None
    
    def update_year_button_states(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa c√°c button nƒÉm h·ªçc"""
        # Reset t·∫•t c·∫£ button v·ªÅ tr·∫°ng th√°i normal
        self.btn_change_year_2024.configure(style='TButton')
        self.btn_change_year_2025.configure(style='TButton')
        
        # Set button active cho nƒÉm hi·ªán t·∫°i
        if self.current_school_year == 2024:
            self.btn_change_year_2024.configure(style='Success.TButton')
            self.btn_change_year_2024.configure(text="‚úì 2024-2025")
            self.btn_change_year_2025.configure(text="2025-2026")
        else:  # 2025 ho·∫∑c m·∫∑c ƒë·ªãnh
            self.btn_change_year_2025.configure(style='Success.TButton')
            self.btn_change_year_2025.configure(text="‚úì 2025-2026")
            self.btn_change_year_2024.configure(text="2024-2025")

    def change_school_year(self, year):
        """Thay ƒë·ªïi nƒÉm h·ªçc"""
        if self.is_processing:
            messagebox.showwarning("C·∫£nh b√°o", "H·ªá th·ªëng ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i.")
            return
        
        # Ki·ªÉm tra xem c√≥ sheets_viewer v√† c√≥ row ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if not hasattr(self, 'sheets_viewer'):
            messagebox.showerror("L·ªói", "Google Sheets viewer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return
            
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Vui l√≤ng ch·ªçn m·ªôt row (tr∆∞·ªùng h·ªçc) trong Google Sheets tr∆∞·ªõc khi thay ƒë·ªïi nƒÉm h·ªçc.\n\n" +
                                 "Click v√†o s·ªë th·ª© t·ª± h√†ng b√™n tr√°i ƒë·ªÉ ch·ªçn row.")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin row ƒë∆∞·ª£c ch·ªçn
        row_info = self.sheets_viewer.get_selected_row_info()
        self.log_message(f"üìã Tr∆∞·ªùng ƒë∆∞·ª£c ch·ªçn: {row_info}", "info")
        
        # L∆∞u tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ ƒë·ªÉ restore n·∫øu c√≥ l·ªói
        self.previous_school_year = self.current_school_year
        
        # C·∫≠p nh·∫≠t current year
        self.current_school_year = year
        self.update_year_button_states()
            
        self.log_message(f"B·∫Øt ƒë·∫ßu thay ƒë·ªïi nƒÉm h·ªçc sang {year}...", "info")
        
        thread = threading.Thread(target=self._change_school_year_thread, args=(year, selected_row_data))
        thread.daemon = True
        thread.start()
        
    def _change_school_year_thread(self, year, selected_school_data):
        """Thay ƒë·ªïi nƒÉm h·ªçc trong thread"""
        try:
            self.is_processing = True
            self.update_progress_safe(10, f"ƒêang thay ƒë·ªïi nƒÉm h·ªçc sang {year}...")
            
            # Import v√† kh·ªüi t·∫°o OnLuyen client
            client = OnLuyenAPIClient()
            
            # L·∫•y th√¥ng tin login t·ª´ selected_school_data
            self.update_progress_safe(20, "ƒêang th·ª±c hi·ªán login...")
            username = selected_school_data.get('Admin', '').strip()
            password = selected_school_data.get('M·∫≠t kh·∫©u', '').strip()
            
            # Fallback cho c√°c t√™n c·ªôt kh√°c c√≥ th·ªÉ c√≥
            if not username:
                username = selected_school_data.get('Username', '').strip()
            if not password:
                password = selected_school_data.get('Password', '').strip()
            
            if not username or not password:
                self.log_message_safe(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin login trong d·ªØ li·ªáu tr∆∞·ªùng ƒë∆∞·ª£c ch·ªçn", "error")
                self.log_message_safe(f"üîç D·ªØ li·ªáu c√≥ s·∫µn: {list(selected_school_data.keys())}", "info")
                self.log_message_safe(f"üîç Admin: '{username}', M·∫≠t kh·∫©u: '{password}'", "info")
                return
            
            self.log_message_safe(f"üîë ƒêang ki·ªÉm tra token cho nƒÉm {year}...", "info")
            
            # S·ª≠ d·ª•ng ensure_valid_token ƒë·ªÉ t·ª± ƒë·ªông login n·∫øu c·∫ßn
            if not client.ensure_valid_token(username, password, year):
                self.log_message_safe("‚ùå Kh√¥ng th·ªÉ l·∫•y token h·ª£p l·ªá", "error")
                return
            
            self.log_message_safe("‚úÖ Token h·ª£p l·ªá!", "success")
            self.update_progress_safe(40, "Login th√†nh c√¥ng, ƒëang thay ƒë·ªïi nƒÉm h·ªçc...")
            
            # Thay ƒë·ªïi nƒÉm h·ªçc
            self.update_progress_safe(60, f"ƒêang g·ª≠i y√™u c·∫ßu thay ƒë·ªïi nƒÉm {year}...")
            result = client.change_year_v2(year)
            
            if result['success']:
                self.update_progress_safe(90, "Th√†nh c√¥ng")
                self.log_message_safe(f"‚úÖ ƒê√£ thay ƒë·ªïi nƒÉm h·ªçc sang {year} th√†nh c√¥ng!", "success")
                
                # Hi·ªÉn th·ªã th√¥ng tin token m·ªõi
                self.root.after(0, self._log_current_school_year_info)
                
                self.update_progress_safe(100, "Ho√†n th√†nh")
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng trong main thread
                self.root.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", 
                                  f"ƒê√£ thay ƒë·ªïi nƒÉm h·ªçc sang {year} th√†nh c√¥ng!\n\n"
                                  f"Tr∆∞·ªùng: {selected_school_data.get('T√™n tr∆∞·ªùng', 'N/A')}\n"
                                  f"Username: {username}\n"
                                  f"Access token ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† l∆∞u v√†o file login."))
                
            else:
                error_msg = result.get('error', 'Unknown error')
                self.log_message_safe(f"‚ùå L·ªói thay ƒë·ªïi nƒÉm h·ªçc: {error_msg}", "error")
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói thay ƒë·ªïi nƒÉm h·ªçc:\n{error_msg}"))
                
                # N·∫øu c√≥ l·ªói, reset l·∫°i button state v·ªÅ tr·∫°ng th√°i tr∆∞·ªõc
                if hasattr(self, 'previous_school_year'):
                    self.current_school_year = self.previous_school_year
                    self.root.after(0, self.update_year_button_states)
                
        except Exception as e:
            self.log_message_safe(f"‚ùå L·ªói: {str(e)}", "error")
            self.root.after(0, lambda: messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra:\n{str(e)}"))
            
            # Reset l·∫°i button state n·∫øu c√≥ l·ªói
            if hasattr(self, 'previous_school_year'):
                self.current_school_year = self.previous_school_year
                self.root.after(0, self.update_year_button_states)
        finally:
            self.is_processing = False

    def convert_json_to_excel(self):
        """Chuy·ªÉn ƒë·ªïi JSON sang Excel"""
        # File dialog to select JSON file
        json_file = filedialog.askopenfilename(
            title="Ch·ªçn file JSON",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            initialdir="data/output"
        )
        
        if not json_file:
            return
            
        self.log_message(f"B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi: {os.path.basename(json_file)}", "info")
        
        thread = threading.Thread(target=self._convert_json_to_excel_thread, args=(json_file,))
        thread.daemon = True
        thread.start()
        
    def _convert_json_to_excel_thread(self, json_file):
        """Chuy·ªÉn ƒë·ªïi JSON sang Excel trong thread"""
        try:
            self.is_processing = True
            self.update_progress(10, "ƒêang t·∫£i JSON...")
            
            converter = JSONToExcelTemplateConverter(json_file)
            
            self.update_progress(30, "ƒêang load d·ªØ li·ªáu...")
            if not converter.load_json_data():
                self.log_message("L·ªói load d·ªØ li·ªáu JSON", "error")
                return
                
            self.update_progress(50, "ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu...")
            teachers_extracted = converter.extract_teachers_data()
            students_extracted = converter.extract_students_data()
            
            if not teachers_extracted and not students_extracted:
                self.log_message("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ chuy·ªÉn ƒë·ªïi", "warning")
                return
                
            self.update_progress(80, "ƒêang t·∫°o file Excel...")
            output_path = converter.convert()
            
            if output_path:
                self.update_progress(100, "Ho√†n th√†nh")
                self.log_message(f"ƒê√£ t·∫°o file Excel: {output_path}", "success")
                self.add_result_file(output_path, "Excel")
            else:
                self.log_message("L·ªói t·∫°o file Excel", "error")
                
        except Exception as e:
            self.log_message(f"L·ªói chuy·ªÉn ƒë·ªïi: {str(e)}", "error")
        finally:
            self.is_processing = False
            
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω hi·ªán t·∫°i"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën d·ª´ng x·ª≠ l√Ω?"):
            self.is_processing = False
            self.update_progress(0, "ƒê√£ d·ª´ng")
            self.log_message("X·ª≠ l√Ω ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng", "warning")

    def test_onluyen_connection(self):
        """Test k·∫øt n·ªëi OnLuyen API"""
        self.log_message("ƒêang test k·∫øt n·ªëi OnLuyen API...", "info")
        
        try:
            client = OnLuyenAPIClient()
            # Test basic connection
            self.log_message("K·∫øt n·ªëi OnLuyen API th√†nh c√¥ng", "success")
        except Exception as e:
            self.log_message(f"L·ªói k·∫øt n·ªëi OnLuyen API: {str(e)}", "error")
            
    def test_sheets_connection(self):
        """Test k·∫øt n·ªëi Google Sheets"""
        self.log_message("ƒêang test k·∫øt n·ªëi Google Sheets...", "info")
        
        try:
            extractor = GoogleSheetsExtractor()
            # Test connection
            self.log_message("K·∫øt n·ªëi Google Sheets th√†nh c√¥ng", "success")
        except Exception as e:
            self.log_message(f"L·ªói k·∫øt n·ªëi Google Sheets: {str(e)}", "error")
                    
    def browse_directory(self, var):
        """Browse v√† ch·ªçn th∆∞ m·ª•c"""
        directory = filedialog.askdirectory(initialdir=var.get())
        if directory:
            var.set(directory)
            
    def add_result_file(self, file_path, file_type):
        """Th√™m file v√†o results tab"""
        if os.path.exists(file_path):
            file_name = os.path.basename(file_path)
            file_size = f"{os.path.getsize(file_path) / (1024*1024):.1f} MB"
            file_date = datetime.fromtimestamp(os.path.getmtime(file_path)).strftime("%Y-%m-%d %H:%M:%S")
            
            self.files_tree.insert('', 'end', 
                                 text=file_name,
                                 values=(file_type, file_path, file_size, file_date))
                                 
    def show_files_context_menu(self, event):
        """Hi·ªÉn th·ªã context menu cho files"""
        item = self.files_tree.selection()[0] if self.files_tree.selection() else None
        if item:
            self.files_context_menu.post(event.x_root, event.y_root)
            
    def open_selected_file(self):
        """M·ªü file ƒë√£ ch·ªçn"""
        item = self.files_tree.selection()[0] if self.files_tree.selection() else None
        if item:
            file_path = self.files_tree.item(item, 'values')[1]
            try:
                os.startfile(file_path)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file: {str(e)}")
                
    def open_file_location(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file"""
        item = self.files_tree.selection()[0] if self.files_tree.selection() else None
        if item:
            file_path = self.files_tree.item(item, 'values')[1]
            try:
                os.startfile(os.path.dirname(file_path))
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: {str(e)}")
                
    def copy_file_path(self):
        """Sao ch√©p ƒë∆∞·ªùng d·∫´n file"""
        item = self.files_tree.selection()[0] if self.files_tree.selection() else None
        if item:
            file_path = self.files_tree.item(item, 'values')[1]
            self.root.clipboard_clear()
            self.root.clipboard_append(file_path)
            self.log_message(f"ƒê√£ sao ch√©p ƒë∆∞·ªùng d·∫´n: {file_path}", "info")
            
    def open_config(self):
        """M·ªü c·∫•u h√¨nh"""
        self.notebook.select(1)  # Switch to config tab
        
    def show_about(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
        about_text = """
School Process Application v1.0.0

·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªùng h·ªçc v·ªõi OnLuyen API

T√≠nh nƒÉng:
‚Ä¢ K·∫øt n·ªëi OnLuyen API
‚Ä¢ Tr√≠ch xu·∫•t d·ªØ li·ªáu Google Sheets  
‚Ä¢ Chuy·ªÉn ƒë·ªïi JSON sang Excel
‚Ä¢ Upload Google Drive

Ph√°t tri·ªÉn b·ªüi: Assistant
Ng√†y: 2025-07-29
        """
        messagebox.showinfo("V·ªÅ ·ª©ng d·ª•ng", about_text)
        
    def refresh_ui(self):
        """Refresh UI"""
        self.log_message("ƒêang refresh UI...", "info")
        
    def upload_files_to_drive(self, export_results):
        """Upload file Excel to Google Drive"""
        try:
            self.log_message("ƒêang ƒë·∫©y file Excel l√™n Google Drive...", "info")
            
            # T·∫°o thread ri√™ng ƒë·ªÉ upload
            def upload_thread():
                try:
                    # Import and execute upload
                    console_app = SchoolProcessApp()
                    
                    # G·ªçi h√†m upload c·ªßa console app (ch·ªâ upload file Excel)
                    upload_result = console_app.upload_to_drive(
                        export_results.get('json_file_path', ''),
                        export_results.get('excel_file_path', ''),
                        export_results.get('drive_link', ''),
                        export_results.get('school_name', '')
                    )
                    
                    if upload_result.get('success', False):
                        self.log_message_safe("‚úÖ ƒê√£ ƒë·∫©y file Excel l√™n Google Drive th√†nh c√¥ng!", "success")
                        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ ƒë·∫©y file Excel l√™n Google Drive th√†nh c√¥ng!")
                    else:
                        error_msg = upload_result.get('error', 'Unknown error')
                        self.log_message_safe(f"‚ùå L·ªói khi ƒë·∫©y l√™n Drive: {error_msg}", "error")
                        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·∫©y l√™n Drive: {error_msg}")
                        
                except Exception as e:
                    self.log_message_safe(f"‚ùå L·ªói upload: {str(e)}", "error")
                    messagebox.showerror("L·ªói", f"L·ªói khi upload: {str(e)}")
            
            thread = threading.Thread(target=upload_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            self.log_message(f"L·ªói upload files: {str(e)}", "error")
            messagebox.showerror("L·ªói", f"L·ªói upload: {str(e)}")
    
    def bulk_delete_teachers(self):
        """X√≥a to√†n b·ªô gi√°o vi√™n trong tr∆∞·ªùng"""
        # Ki·ªÉm tra ƒë√£ ch·ªçn tr∆∞·ªùng ch∆∞a
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt tr∆∞·ªùng t·ª´ danh s√°ch tr∆∞·ªõc!")
            return
        
        school_name = selected_row_data.get('T√™n tr∆∞·ªùng', 'N/A')
        
        # Hi·ªÉn th·ªã x√°c nh·∫≠n
        result = messagebox.askyesno(
            "X√°c nh·∫≠n x√≥a", 
            f"‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a TO√ÄN B·ªò gi√°o vi√™n?\n\n"
            f"üè´ Tr∆∞·ªùng: {school_name}\n\n"
            f"Thao t√°c n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n\n"
            f"T·∫•t c·∫£ d·ªØ li·ªáu gi√°o vi√™n s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.",
            icon='warning'
        )
        
        if not result:
            return
        
        # Hi·ªÉn th·ªã x√°c nh·∫≠n l·∫ßn 2
        confirm = messagebox.askyesno(
            "X√°c nh·∫≠n l·∫ßn 2",
            f"üî¥ X√ÅC NH·∫¨N L·∫¶N CU·ªêI!\n\n"
            f"üè´ Tr∆∞·ªùng: {school_name}\n\n"
            f"B·∫°n th·ª±c s·ª± mu·ªën x√≥a to√†n b·ªô gi√°o vi√™n?\n"
            f"Kh√¥ng th·ªÉ kh√¥i ph·ª•c sau khi x√≥a!",
            icon='warning'
        )
        
        if not confirm:
            return
        
        try:
            from config.onluyen_api import OnLuyenAPIClient
            
            # L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ selected_row_data
            admin_email = selected_row_data.get('Admin', '').strip()
            admin_password = selected_row_data.get('M·∫≠t kh·∫©u', '').strip()
            
            if not admin_email or not admin_password:
                messagebox.showerror("L·ªói", f"Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p cho tr∆∞·ªùng: {school_name}\nVui l√≤ng ki·ªÉm tra c·ªôt Admin v√† M·∫≠t kh·∫©u!")
                return
            
            # T·∫°o progress dialog
            progress_window = tk.Toplevel(self.root)
            progress_window.title("ƒêang x√≥a gi√°o vi√™n...")
            progress_window.geometry("500x300")
            progress_window.transient(self.root)
            progress_window.grab_set()
            
            # Center progress window
            progress_window.update_idletasks()
            x = (progress_window.winfo_screenwidth() // 2) - (250)
            y = (progress_window.winfo_screenheight() // 2) - (150)
            progress_window.geometry(f"500x300+{x}+{y}")
            
            # Progress content
            ttk.Label(progress_window, text=f"üóëÔ∏è ƒêang x√≥a to√†n b·ªô gi√°o vi√™n - {school_name}", font=('Arial', 12, 'bold')).pack(pady=10)
            
            progress_text = tk.Text(progress_window, height=10, width=60)
            progress_text.pack(padx=10, pady=10, fill='both', expand=True)
            
            scrollbar = ttk.Scrollbar(progress_window, orient="vertical", command=progress_text.yview)
            scrollbar.pack(side="right", fill="y")
            progress_text.configure(yscrollcommand=scrollbar.set)
            
            def log_to_progress(message):
                progress_text.insert(tk.END, message + "\n")
                progress_text.see(tk.END)
                progress_window.update()
            
            log_to_progress(f"üè´ Tr∆∞·ªùng: {school_name}")
            log_to_progress(f"üë§ Admin: {admin_email}")
            log_to_progress("üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a h√†ng lo·∫°t...")
            
            # Th·ª±c hi·ªán x√≥a
            api_client = OnLuyenAPIClient()
            
            # X√≥a h√†ng lo·∫°t
            result = api_client.bulk_delete_teachers(
                admin_email=admin_email,
                admin_password=admin_password,
                school_year=2025,
                delay_seconds=0.3
            )
            
            progress_window.destroy()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if result.get('success', False):
                messagebox.showinfo(
                    "Th√†nh c√¥ng",
                    f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!\n\n"
                    f"üè´ Tr∆∞·ªùng: {school_name}\n"
                    f"üìä T·ªïng s·ªë gi√°o vi√™n ƒë√£ x√≥a: {result.get('deleted_count', 0)}\n"
                    f"‚ùå Th·∫•t b·∫°i: {result.get('failed_count', 0)}"
                )
            else:
                error_details = "\n".join(result.get('errors', []))
                messagebox.showerror(
                    "Th·∫•t b·∫°i",
                    f"‚ùå X√≥a th·∫•t b·∫°i!\n\n"
                    f"üè´ Tr∆∞·ªùng: {school_name}\n"
                    f"üìä ƒê√£ x√≥a: {result.get('deleted_count', 0)}\n"
                    f"‚ùå Th·∫•t b·∫°i: {result.get('failed_count', 0)}\n\n"
                    f"Chi ti·∫øt l·ªói:\n{error_details[:500]}..."
                )
            
            # Log k·∫øt qu·∫£ chi ti·∫øt
            self.log_text_widget.insert(tk.END, f"\n{'='*50}\n")
            self.log_text_widget.insert(tk.END, f"BULK DELETE TEACHERS RESULT\n")
            self.log_text_widget.insert(tk.END, f"{'='*50}\n")
            self.log_text_widget.insert(tk.END, f"Tr∆∞·ªùng: {school_name}\n")
            self.log_text_widget.insert(tk.END, f"Admin: {admin_email}\n")
            self.log_text_widget.insert(tk.END, f"Th√†nh c√¥ng: {result.get('success', False)}\n")
            self.log_text_widget.insert(tk.END, f"T·ªïng s·ªë gi√°o vi√™n: {result.get('total_teachers', 0)}\n")
            self.log_text_widget.insert(tk.END, f"ƒê√£ x√≥a: {result.get('deleted_count', 0)}\n")
            self.log_text_widget.insert(tk.END, f"Th·∫•t b·∫°i: {result.get('failed_count', 0)}\n")
            
            if result.get('errors'):
                self.log_text_widget.insert(tk.END, f"\nL·ªói:\n")
                for error in result.get('errors', []):
                    self.log_text_widget.insert(tk.END, f"  - {error}\n")
            
            self.log_text_widget.see(tk.END)
            
        except Exception as e:
            if 'progress_window' in locals():
                progress_window.destroy()
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
            self.log_text_widget.insert(tk.END, f"\nL·ªói bulk delete: {str(e)}\n")
            self.log_text_widget.see(tk.END)

    def selective_delete_teachers(self):
        """X√≥a gi√°o vi√™n theo danh s√°ch t·ª´ file Excel"""
        # Ki·ªÉm tra ƒë√£ ch·ªçn tr∆∞·ªùng ch∆∞a
        selected_row_data = self.sheets_viewer.get_selected_row_data()
        if not selected_row_data:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt tr∆∞·ªùng t·ª´ danh s√°ch tr∆∞·ªõc!")
            return
        
        school_name = selected_row_data.get('T√™n tr∆∞·ªùng', 'N/A')
        
        # Ch·ªçn file Excel
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file Excel ch·ª©a danh s√°ch gi√°o vi√™n c·∫ßn x√≥a",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        
        if not file_path:
            return
        
        # Hi·ªÉn th·ªã x√°c nh·∫≠n
        result = messagebox.askyesno(
            "X√°c nh·∫≠n x√≥a",
            f"‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c gi√°o vi√™n?\n\n"
            f"üè´ Tr∆∞·ªùng: {school_name}\n"
            f"üìÇ File: {os.path.basename(file_path)}\n\n"
            f"Thao t√°c n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n"
            f"C√°c gi√°o vi√™n trong danh s√°ch s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.",
            icon='warning'
        )
        
        if not result:
            return
        
        try:
            from config.onluyen_api import OnLuyenAPIClient
            
            # L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ selected_row_data
            admin_email = selected_row_data.get('Admin', '').strip()
            admin_password = selected_row_data.get('M·∫≠t kh·∫©u', '').strip()
            
            if not admin_email or not admin_password:
                messagebox.showerror("L·ªói", f"Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p cho tr∆∞·ªùng: {school_name}\nVui l√≤ng ki·ªÉm tra c·ªôt Admin v√† M·∫≠t kh·∫©u!")
                return
            
            # T·∫°o progress dialog
            progress_window = tk.Toplevel(self.root)
            progress_window.title("ƒêang x√≥a gi√°o vi√™n ch·ªâ ƒë·ªãnh...")
            progress_window.geometry("600x400")
            progress_window.transient(self.root)
            progress_window.grab_set()
            
            # Center progress window
            progress_window.update_idletasks()
            x = (progress_window.winfo_screenwidth() // 2) - (300)
            y = (progress_window.winfo_screenheight() // 2) - (200)
            progress_window.geometry(f"600x400+{x}+{y}")
            
            # Progress content
            ttk.Label(progress_window, text=f"üóëÔ∏è ƒêang x√≥a gi√°o vi√™n theo danh s√°ch - {school_name}", font=('Arial', 12, 'bold')).pack(pady=10)
            
            progress_text = tk.Text(progress_window, height=15, width=70)
            progress_text.pack(padx=10, pady=10, fill='both', expand=True)
            
            scrollbar = ttk.Scrollbar(progress_window, orient="vertical", command=progress_text.yview)
            scrollbar.pack(side="right", fill="y")
            progress_text.configure(yscrollcommand=scrollbar.set)
            
            def log_to_progress(message):
                progress_text.insert(tk.END, message + "\n")
                progress_text.see(tk.END)
                progress_window.update()
            
            log_to_progress(f"üè´ Tr∆∞·ªùng: {school_name}")
            log_to_progress(f"üë§ Admin: {admin_email}")
            log_to_progress("üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a c√≥ ch·ªçn l·ªçc...")
            log_to_progress(f"üìÇ File: {file_path}")
            
            # Th·ª±c hi·ªán x√≥a
            api_client = OnLuyenAPIClient()
            
            # X√≥a c√≥ ch·ªçn l·ªçc
            result = api_client.selective_delete_teachers_from_excel(
                excel_file_path=file_path,
                admin_email=admin_email,
                admin_password=admin_password,
                school_year=2025,
                delay_seconds=0.3
            )
            
            progress_window.destroy()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if result.get('success', False):
                messagebox.showinfo(
                    "Th√†nh c√¥ng",
                    f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!\n\n"
                    f"üè´ Tr∆∞·ªùng: {school_name}\n"
                    f"üìÇ File: {os.path.basename(file_path)}\n"
                    f"üìã T·ªïng s·ªë t√†i kho·∫£n trong Excel: {result.get('total_from_excel', 0)}\n"
                    f"üîç T√¨m th·∫•y trong h·ªá th·ªëng: {result.get('matched_teachers', 0)}\n"
                    f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng: {result.get('deleted_count', 0)}\n"
                    f"‚ùì Kh√¥ng t√¨m th·∫•y: {result.get('not_found_count', 0)}\n"
                    f"‚ùå Th·∫•t b·∫°i: {result.get('failed_count', 0)}"
                )
            else:
                error_details = "\n".join(result.get('errors', []))
                not_found = result.get('not_found_teachers', [])
                not_found_text = f"\nKh√¥ng t√¨m th·∫•y: {', '.join(not_found[:10])}" if not_found else ""
                if len(not_found) > 10:
                    not_found_text += f"... v√† {len(not_found) - 10} t√†i kho·∫£n kh√°c"
                
                messagebox.showerror(
                    "Ho√†n th√†nh v·ªõi l·ªói",
                    f"‚ö†Ô∏è X√≥a ho√†n th√†nh v·ªõi m·ªôt s·ªë l·ªói!\n\n"
                    f"üè´ Tr∆∞·ªùng: {school_name}\n"
                    f"üìÇ File: {os.path.basename(file_path)}\n"
                    f"üìã T·ªïng s·ªë t√†i kho·∫£n trong Excel: {result.get('total_from_excel', 0)}\n"
                    f"üîç T√¨m th·∫•y: {result.get('matched_teachers', 0)}\n"
                    f"‚úÖ ƒê√£ x√≥a: {result.get('deleted_count', 0)}\n"
                    f"‚ùì Kh√¥ng t√¨m th·∫•y: {result.get('not_found_count', 0)}\n"
                    f"‚ùå Th·∫•t b·∫°i: {result.get('failed_count', 0)}\n"
                    f"{not_found_text}\n\n"
                    f"Chi ti·∫øt l·ªói:\n{error_details[:300]}..."
                )
            
            # Log k·∫øt qu·∫£ chi ti·∫øt
            self.log_text_widget.insert(tk.END, f"\n{'='*50}\n")
            self.log_text_widget.insert(tk.END, f"SELECTIVE DELETE TEACHERS RESULT\n")
            self.log_text_widget.insert(tk.END, f"{'='*50}\n")
            self.log_text_widget.insert(tk.END, f"Tr∆∞·ªùng: {school_name}\n")
            self.log_text_widget.insert(tk.END, f"Admin: {admin_email}\n")
            self.log_text_widget.insert(tk.END, f"File: {file_path}\n")
            self.log_text_widget.insert(tk.END, f"Th√†nh c√¥ng: {result.get('success', False)}\n")
            self.log_text_widget.insert(tk.END, f"T·ªïng s·ªë t√†i kho·∫£n trong Excel: {result.get('total_from_excel', 0)}\n")
            self.log_text_widget.insert(tk.END, f"T√¨m th·∫•y trong h·ªá th·ªëng: {result.get('matched_teachers', 0)}\n")
            self.log_text_widget.insert(tk.END, f"ƒê√£ x√≥a: {result.get('deleted_count', 0)}\n")
            self.log_text_widget.insert(tk.END, f"Kh√¥ng t√¨m th·∫•y: {result.get('not_found_count', 0)}\n")
            self.log_text_widget.insert(tk.END, f"Th·∫•t b·∫°i: {result.get('failed_count', 0)}\n")
            
            if result.get('not_found_teachers'):
                self.log_text_widget.insert(tk.END, f"\nT√†i kho·∫£n kh√¥ng t√¨m th·∫•y:\n")
                for account in result.get('not_found_teachers', []):
                    self.log_text_widget.insert(tk.END, f"  - {account}\n")
            
            if result.get('errors'):
                self.log_text_widget.insert(tk.END, f"\nL·ªói:\n")
                for error in result.get('errors', []):
                    self.log_text_widget.insert(tk.END, f"  - {error}\n")
            
            self.log_text_widget.see(tk.END)
            
        except Exception as e:
            if 'progress_window' in locals():
                progress_window.destroy()
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
            self.log_text_widget.insert(tk.END, f"\nL·ªói selective delete: {str(e)}\n")
            self.log_text_widget.see(tk.END)
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.log_message("School Process Application ƒë√£ kh·ªüi ƒë·ªông", "success")
        self.root.mainloop()


class ExportViewDialog:
    """Dialog ƒë·ªÉ xem v√† qu·∫£n l√Ω file export sau khi x·ª≠ l√Ω xong"""
    
    def __init__(self, parent, export_results):
        """
        Kh·ªüi t·∫°o dialog
        
        Args:
            parent: C·ª≠a s·ªï cha
            export_results: Dict ch·ª©a th√¥ng tin file export {
                'json_file_path': str,
                'excel_file_path': str,
                'school_name': str,
                'drive_link': str
            }
        """
        self.parent = parent
        self.export_results = export_results
        self.result = None  # 'close', 'view', 'upload'
        
        self.setup_dialog()
        
    def setup_dialog(self):
        """Thi·∫øt l·∫≠p dialog"""
        self.dialog = tk.Toplevel(self.parent.root)
        self.dialog.title("Xem File Export")
        self.dialog.geometry("500x350")
        self.dialog.resizable(False, False)
        
        # Center dialog
        self.center_dialog()
        
        # Make modal
        self.dialog.transient(self.parent.root)
        self.dialog.grab_set()
        
        self.setup_ui()
        
    def center_dialog(self):
        """CƒÉn gi·ªØa dialog"""
        self.dialog.update_idletasks()
        width = self.dialog.winfo_width()
        height = self.dialog.winfo_height()
        x = (self.dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (height // 2)
        self.dialog.geometry(f"{width}x{height}+{x}+{y}")
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p UI c·ªßa dialog"""
        # Main frame
        main_frame = tk.Frame(self.dialog, padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        # Title
        title_label = tk.Label(main_frame, 
                              text="üéâ X·ª≠ l√Ω d·ªØ li·ªáu ho√†n th√†nh!",
                              font=('Segoe UI', 16, 'bold'),
                              fg='#2E7D32')
        title_label.pack(pady=(0, 20))
        
        # School info
        school_name = self.export_results.get('school_name', 'N/A')
        school_label = tk.Label(main_frame,
                               text=f"Tr∆∞·ªùng: {school_name}",
                               font=('Segoe UI', 12, 'bold'))
        school_label.pack(pady=(0, 15))
        
        # File info frame
        info_frame = tk.Frame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        # Files created
        files_label = tk.Label(info_frame,
                              text="C√°c file ƒë√£ t·∫°o:",
                              font=('Segoe UI', 11, 'bold'))
        files_label.pack(anchor='w')
        
        # JSON file
        json_path = self.export_results.get('json_file_path', '')
        if json_path:
            json_name = os.path.basename(json_path)
            json_label = tk.Label(info_frame,
                                 text=f"üìÑ JSON: {json_name}",
                                 font=('Segoe UI', 10))
            json_label.pack(anchor='w', padx=(20, 0), pady=(5, 0))
        
        # Excel file
        excel_path = self.export_results.get('excel_file_path', '')
        if excel_path:
            excel_name = os.path.basename(excel_path)
            excel_label = tk.Label(info_frame,
                                  text=f"üìä Excel: {excel_name}",
                                  font=('Segoe UI', 10))
            excel_label.pack(anchor='w', padx=(20, 0), pady=(2, 0))
        
        # Drive info
        drive_link = self.export_results.get('drive_link', '')
        if drive_link:
            drive_label = tk.Label(info_frame,
                                  text=f"üìÅ Th∆∞ m·ª•c Drive: {drive_link[:50]}...",
                                  font=('Segoe UI', 10),
                                  fg='#1976D2')
            drive_label.pack(anchor='w', padx=(20, 0), pady=(5, 0))
        
        # Buttons frame
        buttons_frame = tk.Frame(main_frame)
        buttons_frame.pack(fill='x', pady=(20, 0))
        
        # Close button
        btn_close = tk.Button(buttons_frame,
                             text="ƒê√≥ng",
                             font=('Segoe UI', 11),
                             bg='#757575',
                             fg='white',
                             padx=20,
                             pady=8,
                             command=self.close_dialog)
        btn_close.pack(side='left', padx=(0, 10))
        
        # View file button
        btn_view = tk.Button(buttons_frame,
                            text="Xem File Export",
                            font=('Segoe UI', 11),
                            bg='#1976D2',
                            fg='white',
                            padx=20,
                            pady=8,
                            command=self.view_file)
        btn_view.pack(side='left', padx=(0, 10))
        
        # Upload to drive button
        btn_upload = tk.Button(buttons_frame,
                              text="ƒê·∫©y l√™n Driver",
                              font=('Segoe UI', 11),
                              bg='#388E3C',
                              fg='white',
                              padx=20,
                              pady=8,
                              command=self.upload_to_drive)
        btn_upload.pack(side='right')
        
    def close_dialog(self):
        """ƒê√≥ng dialog"""
        self.result = 'close'
        self.dialog.destroy()
        
    def view_file(self):
        """Xem file export"""
        self.result = 'view'
        excel_path = self.export_results.get('excel_file_path', '')
        
        if excel_path and os.path.exists(excel_path):
            try:
                # M·ªü file Excel
                if platform.system() == 'Windows':
                    os.startfile(excel_path)
                elif platform.system() == 'Darwin':  # macOS
                    subprocess.run(['open', excel_path])
                else:  # Linux
                    subprocess.run(['xdg-open', excel_path])
                    
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ m·ªü file Excel!")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file: {str(e)}")
                print(f"Debug - L·ªói m·ªü file: {e}")
                print(f"Debug - File path: {excel_path}")
                print(f"Debug - File exists: {os.path.exists(excel_path)}")
        else:
            error_msg = f"Kh√¥ng t√¨m th·∫•y file Excel!\nƒê∆∞·ªùng d·∫´n: {excel_path}\nFile t·ªìn t·∫°i: {os.path.exists(excel_path) if excel_path else 'N/A'}"
            messagebox.showerror("L·ªói", error_msg)
            print(f"Debug - Export results: {self.export_results}")
            
    def upload_to_drive(self):
        """ƒê·∫©y file l√™n Google Drive"""
        self.result = 'upload'
        self.dialog.destroy()
        
        # G·ªçi h√†m upload c·ªßa parent
        self.parent.upload_files_to_drive(self.export_results)
        
    def show(self):
        """Hi·ªÉn th·ªã dialog v√† ch·ªù k·∫øt qu·∫£"""
        self.dialog.wait_window()
        return self.result


def main():
    """Entry point cho UI"""
    app = SchoolProcessMainWindow()
    app.run()


if __name__ == "__main__":
    main()
